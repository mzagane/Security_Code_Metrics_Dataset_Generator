<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="E:\ZM\Research\My_Works\Current_Works\Vulnerabilities_Prediction\Using_Security-specific_Code_Metrics_to_Predict_C-Cpp_Code_Vulnerabilities\Tools\Data_Preparation\ZM_J_Code_Metrics_2\ZM_J_Code_Metrics_2\tests\eval.c" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:18">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:19">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:19">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="3:1" pos:end="3:19">#<cpp:directive pos:start="3:2" pos:end="3:8">include</cpp:directive> <cpp:file pos:start="3:10" pos:end="3:19">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define pos:start="4:1" pos:end="4:17">#<cpp:directive pos:start="4:2" pos:end="4:7">define</cpp:directive> <cpp:macro pos:start="4:9" pos:end="4:12"><name pos:start="4:9" pos:end="4:12">size</name></cpp:macro> <cpp:value pos:start="4:14" pos:end="4:17">1024</cpp:value></cpp:define>
<function_decl pos:start="5:1" pos:end="5:58"><type pos:start="5:1" pos:end="5:4"><name pos:start="5:1" pos:end="5:4">void</name></type> <name pos:start="5:6" pos:end="5:12">extract</name><parameter_list pos:start="5:13" pos:end="5:57">(<parameter pos:start="5:14" pos:end="5:24"><decl pos:start="5:14" pos:end="5:24"><type pos:start="5:14" pos:end="5:24"><name pos:start="5:14" pos:end="5:17">char</name><modifier pos:start="5:18" pos:end="5:18">*</modifier></type> <name pos:start="5:20" pos:end="5:24">char1</name></decl></parameter>, <parameter pos:start="5:27" pos:end="5:37"><decl pos:start="5:27" pos:end="5:37"><type pos:start="5:27" pos:end="5:37"><name pos:start="5:27" pos:end="5:30">char</name><modifier pos:start="5:31" pos:end="5:31">*</modifier></type> <name pos:start="5:33" pos:end="5:37">char2</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:48"><decl pos:start="5:40" pos:end="5:48"><type pos:start="5:40" pos:end="5:48"><name pos:start="5:40" pos:end="5:42">int</name></type> <name pos:start="5:44" pos:end="5:48">debut</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:56"><decl pos:start="5:51" pos:end="5:56"><type pos:start="5:51" pos:end="5:56"><name pos:start="5:51" pos:end="5:53">int</name></type> <name pos:start="5:55" pos:end="5:56">nb</name></decl></parameter>)</parameter_list>;</function_decl>
<function pos:start="6:1" pos:end="81:1"><type pos:start="6:1" pos:end="6:3"><name pos:start="6:1" pos:end="6:3">int</name></type> <name pos:start="6:5" pos:end="6:9">eval1</name><parameter_list pos:start="6:10" pos:end="6:20">(<parameter pos:start="6:11" pos:end="6:19"><decl pos:start="6:11" pos:end="6:19"><type pos:start="6:11" pos:end="6:16"><name pos:start="6:11" pos:end="6:14">char</name> <modifier pos:start="6:16" pos:end="6:16">*</modifier></type> <name pos:start="6:18" pos:end="6:19">ch</name></decl></parameter>)</parameter_list>
<block pos:start="7:1" pos:end="81:1">{<block_content pos:start="8:1" pos:end="80:16">
<decl_stmt pos:start="8:1" pos:end="8:6"><decl pos:start="8:1" pos:end="8:5"><type pos:start="8:1" pos:end="8:3"><name pos:start="8:1" pos:end="8:3">int</name></type> <name pos:start="8:5" pos:end="8:5">i</name></decl>;</decl_stmt>
<decl_stmt pos:start="9:1" pos:end="9:21"><decl pos:start="9:1" pos:end="9:11"><type pos:start="9:1" pos:end="9:3"><name pos:start="9:1" pos:end="9:3">int</name></type> <name pos:start="9:5" pos:end="9:11">valeur1</name></decl>, <decl pos:start="9:14" pos:end="9:20"><type ref="prev" pos:start="9:1" pos:end="9:3"/><name pos:start="9:14" pos:end="9:20">valeur2</name></decl>;</decl_stmt>
<decl_stmt pos:start="10:1" pos:end="10:11"><decl pos:start="10:1" pos:end="10:10"><type pos:start="10:1" pos:end="10:3"><name pos:start="10:1" pos:end="10:3">int</name></type> <name pos:start="10:5" pos:end="10:10">lgval2</name></decl>;</decl_stmt>
<decl_stmt pos:start="11:1" pos:end="11:18"><decl pos:start="11:1" pos:end="11:10"><type pos:start="11:1" pos:end="11:6"><name pos:start="11:1" pos:end="11:4">char</name> <modifier pos:start="11:6" pos:end="11:6">*</modifier></type><name pos:start="11:7" pos:end="11:10">val1</name></decl>, <decl pos:start="11:13" pos:end="11:17"><type ref="prev" pos:start="11:1" pos:end="11:6"><modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:17">val2</name></decl>;</decl_stmt>
<decl_stmt pos:start="12:1" pos:end="12:25"><decl pos:start="12:1" pos:end="12:24"><type pos:start="12:1" pos:end="12:6"><name pos:start="12:1" pos:end="12:4">char</name> <modifier pos:start="12:6" pos:end="12:6">*</modifier></type><name pos:start="12:7" pos:end="12:17">my_variable</name> <init pos:start="12:19" pos:end="12:24">= <expr pos:start="12:21" pos:end="12:24"><name pos:start="12:21" pos:end="12:24">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="13:1" pos:end="13:10"><decl pos:start="13:1" pos:end="13:9"><type pos:start="13:1" pos:end="13:4"><name pos:start="13:1" pos:end="13:4">char</name></type> <name pos:start="13:6" pos:end="13:9"><name pos:start="13:6" pos:end="13:6">A</name><index pos:start="13:7" pos:end="13:9">[<expr pos:start="13:8" pos:end="13:8"><literal type="number" pos:start="13:8" pos:end="13:8">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="14:1" pos:end="14:8"><decl pos:start="14:1" pos:end="14:7"><type pos:start="14:1" pos:end="14:3"><name pos:start="14:1" pos:end="14:3">int</name></type> <name pos:start="14:5" pos:end="14:7"><name pos:start="14:5" pos:end="14:5">B</name><index pos:start="14:6" pos:end="14:7">[]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="15:1" pos:end="15:14"><decl pos:start="15:1" pos:end="15:13"><type pos:start="15:1" pos:end="15:5"><name pos:start="15:1" pos:end="15:5">float</name></type> <name pos:start="15:7" pos:end="15:13"><name pos:start="15:7" pos:end="15:7">C</name><index pos:start="15:8" pos:end="15:13">[<expr pos:start="15:9" pos:end="15:12"><name pos:start="15:9" pos:end="15:12">size</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="16:1" pos:end="16:15"><decl pos:start="16:1" pos:end="16:14"><type pos:start="16:1" pos:end="16:4"><name pos:start="16:1" pos:end="16:4">char</name></type> <name pos:start="16:6" pos:end="16:14">operation</name></decl>;</decl_stmt>
<decl_stmt pos:start="17:1" pos:end="17:13"><decl pos:start="17:1" pos:end="17:12"><type pos:start="17:1" pos:end="17:3"><name pos:start="17:1" pos:end="17:3">int</name></type> <name pos:start="17:5" pos:end="17:12">resultat</name></decl>;</decl_stmt>

<expr_stmt pos:start="19:1" pos:end="19:59"><expr pos:start="19:1" pos:end="19:58"><call pos:start="19:1" pos:end="19:58"><name pos:start="19:1" pos:end="19:6">fscanf</name><argument_list pos:start="19:7" pos:end="19:58">(<argument pos:start="19:8" pos:end="19:53"><expr pos:start="19:8" pos:end="19:53"><literal type="string" pos:start="19:8" pos:end="19:53">"Le rÃ©sultat de lÂ´opÃ©ration est : %d"</literal></expr></argument>,<argument pos:start="19:55" pos:end="19:57"><expr pos:start="19:55" pos:end="19:57"><name pos:start="19:55" pos:end="19:57">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:start="21:1" pos:end="21:54">/* Recherche dÂ´un opÃ©rateur et de sa position */</comment>
<for pos:start="22:1" pos:end="26:1">for<control pos:start="22:4" pos:end="24:12">( <init pos:start="22:6" pos:end="22:10"><expr pos:start="22:6" pos:end="22:8"><name pos:start="22:6" pos:end="22:6">i</name><operator pos:start="22:7" pos:end="22:7">=</operator><literal type="number" pos:start="22:8" pos:end="22:8">0</literal></expr> ;</init> <condition pos:start="22:12" pos:end="24:7"><expr pos:start="22:12" pos:end="24:6"><operator pos:start="22:12" pos:end="22:12">*</operator><operator pos:start="22:13" pos:end="22:13">(</operator><name pos:start="22:14" pos:end="22:15">ch</name><operator pos:start="22:16" pos:end="22:16">+</operator><name pos:start="22:17" pos:end="22:17">i</name><operator pos:start="22:18" pos:end="22:18">)</operator> <operator pos:start="22:20" pos:end="22:21">!=</operator><literal type="char" pos:start="22:22" pos:end="22:24">'+'</literal> <operator pos:start="22:26" pos:end="22:27">&amp;&amp;</operator> <operator pos:start="22:29" pos:end="22:29">*</operator><operator pos:start="22:30" pos:end="22:30">(</operator><name pos:start="22:31" pos:end="22:32">ch</name><operator pos:start="22:33" pos:end="22:33">+</operator><name pos:start="22:34" pos:end="22:34">i</name><operator pos:start="22:35" pos:end="22:35">)</operator> <operator pos:start="22:37" pos:end="22:38">!=</operator><literal type="char" pos:start="22:39" pos:end="22:41">'-'</literal> <operator pos:start="22:43" pos:end="22:44">&amp;&amp;</operator> <operator pos:start="22:46" pos:end="22:46">*</operator><operator pos:start="22:47" pos:end="22:47">(</operator><name pos:start="22:48" pos:end="22:49">ch</name><operator pos:start="22:50" pos:end="22:50">+</operator><name pos:start="22:51" pos:end="22:51">i</name><operator pos:start="22:52" pos:end="22:52">)</operator> <operator pos:start="22:54" pos:end="22:55">!=</operator><literal type="char" pos:start="22:56" pos:end="22:58">'*'</literal> <operator pos:start="22:60" pos:end="22:61">&amp;&amp;</operator>
<operator pos:start="23:1" pos:end="23:1">*</operator><operator pos:start="23:2" pos:end="23:2">(</operator><name pos:start="23:3" pos:end="23:4">ch</name><operator pos:start="23:5" pos:end="23:5">+</operator><name pos:start="23:6" pos:end="23:6">i</name><operator pos:start="23:7" pos:end="23:7">)</operator> <operator pos:start="23:9" pos:end="23:10">!=</operator><literal type="char" pos:start="23:11" pos:end="23:13">'/'</literal> <operator pos:start="23:15" pos:end="23:16">&amp;&amp;</operator> <operator pos:start="23:18" pos:end="23:18">*</operator><operator pos:start="23:19" pos:end="23:19">(</operator><name pos:start="23:20" pos:end="23:21">ch</name><operator pos:start="23:22" pos:end="23:22">+</operator><name pos:start="23:23" pos:end="23:23">i</name><operator pos:start="23:24" pos:end="23:24">)</operator>
<operator pos:start="24:1" pos:end="24:2">!=</operator><literal type="char" pos:start="24:3" pos:end="24:6">'\0'</literal></expr>;</condition> <incr pos:start="24:9" pos:end="24:11"><expr pos:start="24:9" pos:end="24:11"><name pos:start="24:9" pos:end="24:9">i</name><operator pos:start="24:10" pos:end="24:11">++</operator></expr></incr>)</control>
<block pos:start="25:1" pos:end="26:1">{<block_content>
</block_content>}</block></for>
<comment type="block" pos:start="27:1" pos:end="27:28">/* Traitement des erreurs */</comment>
<if_stmt pos:start="28:1" pos:end="42:1"><if pos:start="28:1" pos:end="32:1">if<condition pos:start="28:3" pos:end="28:8">(<expr pos:start="28:4" pos:end="28:7"><name pos:start="28:4" pos:end="28:4">i</name><operator pos:start="28:5" pos:end="28:6">==</operator><literal type="number" pos:start="28:7" pos:end="28:7">0</literal></expr>)</condition> <comment type="block" pos:start="28:10" pos:end="28:44">/* Le premier opÃ¨rande manque */</comment>
<block pos:start="29:1" pos:end="32:1">{<block_content pos:start="30:1" pos:end="31:8">
<expr_stmt pos:start="30:1" pos:end="30:36"><expr pos:start="30:1" pos:end="30:35"><call pos:start="30:1" pos:end="30:35"><name pos:start="30:1" pos:end="30:6">printf</name><argument_list pos:start="30:7" pos:end="30:35">(<argument pos:start="30:8" pos:end="30:34"><expr pos:start="30:8" pos:end="30:34"><literal type="string" pos:start="30:8" pos:end="30:34">"erreur : pas de &lt;valeur1&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="31:1" pos:end="31:8"><expr pos:start="31:1" pos:end="31:7"><call pos:start="31:1" pos:end="31:7"><name pos:start="31:1" pos:end="31:4">exit</name><argument_list pos:start="31:5" pos:end="31:7">(<argument pos:start="31:6" pos:end="31:6"><expr pos:start="31:6" pos:end="31:6"><literal type="number" pos:start="31:6" pos:end="31:6">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif" pos:start="33:1" pos:end="37:1">else if<condition pos:start="33:8" pos:end="33:24">(<expr pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:9">i</name><operator pos:start="33:10" pos:end="33:11">==</operator><call pos:start="33:12" pos:end="33:21"><name pos:start="33:12" pos:end="33:17">strlen</name><argument_list pos:start="33:18" pos:end="33:21">(<argument pos:start="33:19" pos:end="33:20"><expr pos:start="33:19" pos:end="33:20"><name pos:start="33:19" pos:end="33:20">ch</name></expr></argument>)</argument_list></call><operator pos:start="33:22" pos:end="33:22">-</operator><literal type="number" pos:start="33:23" pos:end="33:23">1</literal></expr>)</condition> <comment type="block" pos:start="33:26" pos:end="33:64">/* Le deuxiÃ¨me opÃ©rande manque */</comment>
<block pos:start="34:1" pos:end="37:1">{<block_content pos:start="35:1" pos:end="36:8">
<expr_stmt pos:start="35:1" pos:end="35:36"><expr pos:start="35:1" pos:end="35:35"><call pos:start="35:1" pos:end="35:35"><name pos:start="35:1" pos:end="35:6">printf</name><argument_list pos:start="35:7" pos:end="35:35">(<argument pos:start="35:8" pos:end="35:34"><expr pos:start="35:8" pos:end="35:34"><literal type="string" pos:start="35:8" pos:end="35:34">"erreur : pas de &lt;valeur2&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="36:1" pos:end="36:8"><expr pos:start="36:1" pos:end="36:7"><call pos:start="36:1" pos:end="36:7"><name pos:start="36:1" pos:end="36:4">exit</name><argument_list pos:start="36:5" pos:end="36:7">(<argument pos:start="36:6" pos:end="36:6"><expr pos:start="36:6" pos:end="36:6"><literal type="number" pos:start="36:6" pos:end="36:6">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif" pos:start="38:1" pos:end="42:1">else if<condition pos:start="38:8" pos:end="38:22">(<expr pos:start="38:9" pos:end="38:21"><name pos:start="38:9" pos:end="38:9">i</name><operator pos:start="38:10" pos:end="38:11">==</operator><call pos:start="38:12" pos:end="38:21"><name pos:start="38:12" pos:end="38:17">strlen</name><argument_list pos:start="38:18" pos:end="38:21">(<argument pos:start="38:19" pos:end="38:20"><expr pos:start="38:19" pos:end="38:20"><name pos:start="38:19" pos:end="38:20">ch</name></expr></argument>)</argument_list></call></expr>)</condition> <comment type="block" pos:start="38:24" pos:end="38:62">/* Il nÂ´a a pad dÂ´opÃ©rateur */</comment>
<block pos:start="39:1" pos:end="42:1">{<block_content pos:start="40:1" pos:end="41:8">
<expr_stmt pos:start="40:1" pos:end="40:37"><expr pos:start="40:1" pos:end="40:36"><call pos:start="40:1" pos:end="40:36"><name pos:start="40:1" pos:end="40:6">printf</name><argument_list pos:start="40:7" pos:end="40:36">(<argument pos:start="40:8" pos:end="40:35"><expr pos:start="40:8" pos:end="40:35"><literal type="string" pos:start="40:8" pos:end="40:35">"erreur : pas de &lt;operator&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="41:1" pos:end="41:8"><expr pos:start="41:1" pos:end="41:7"><call pos:start="41:1" pos:end="41:7"><name pos:start="41:1" pos:end="41:4">exit</name><argument_list pos:start="41:5" pos:end="41:7">(<argument pos:start="41:6" pos:end="41:6"><expr pos:start="41:6" pos:end="41:6"><literal type="number" pos:start="41:6" pos:end="41:6">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<comment type="block" pos:start="43:1" pos:end="44:22">/* char Extraction de la chaÃ®ne de caractÃ¨re correspondant au
premier opÃ©rande */</comment>
<expr_stmt pos:start="45:1" pos:end="45:40"><expr pos:start="45:1" pos:end="45:39"><name pos:start="45:1" pos:end="45:4">val1</name><operator pos:start="45:5" pos:end="45:5">=</operator><operator pos:start="45:6" pos:end="45:6">(</operator><name pos:start="45:7" pos:end="45:10">char</name><operator pos:start="45:11" pos:end="45:11">*</operator><operator pos:start="45:12" pos:end="45:12">)</operator> <call pos:start="45:14" pos:end="45:39"><name pos:start="45:14" pos:end="45:19">malloc</name><argument_list pos:start="45:20" pos:end="45:39">(<argument pos:start="45:21" pos:end="45:38"><expr pos:start="45:21" pos:end="45:38"><operator pos:start="45:21" pos:end="45:21">(</operator><name pos:start="45:22" pos:end="45:22">i</name><operator pos:start="45:23" pos:end="45:23">+</operator><literal type="number" pos:start="45:24" pos:end="45:24">1</literal><operator pos:start="45:25" pos:end="45:25">)</operator><operator pos:start="45:26" pos:end="45:26">*</operator><sizeof pos:start="45:27" pos:end="45:38">sizeof<argument_list pos:start="45:33" pos:end="45:38">(<argument pos:start="45:34" pos:end="45:37"><expr pos:start="45:34" pos:end="45:37"><name pos:start="45:34" pos:end="45:37">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="46:1" pos:end="46:21"><expr pos:start="46:1" pos:end="46:20"><call pos:start="46:1" pos:end="46:20"><name pos:start="46:1" pos:end="46:7">extract</name><argument_list pos:start="46:8" pos:end="46:20">(<argument pos:start="46:9" pos:end="46:10"><expr pos:start="46:9" pos:end="46:10"><name pos:start="46:9" pos:end="46:10">ch</name></expr></argument>,<argument pos:start="46:12" pos:end="46:15"><expr pos:start="46:12" pos:end="46:15"><name pos:start="46:12" pos:end="46:15">val1</name></expr></argument>,<argument pos:start="46:17" pos:end="46:17"><expr pos:start="46:17" pos:end="46:17"><literal type="number" pos:start="46:17" pos:end="46:17">0</literal></expr></argument>,<argument pos:start="46:19" pos:end="46:19"><expr pos:start="46:19" pos:end="46:19"><name pos:start="46:19" pos:end="46:19">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block" pos:start="47:1" pos:end="47:61">/* Transformation de la chaÃ®ne de carctÃ¨re en entier */</comment>
<expr_stmt pos:start="48:1" pos:end="48:28"><expr pos:start="48:1" pos:end="48:27"><call pos:start="48:1" pos:end="48:27"><name pos:start="48:1" pos:end="48:6">sscanf</name><argument_list pos:start="48:7" pos:end="48:27">(<argument pos:start="48:8" pos:end="48:11"><expr pos:start="48:8" pos:end="48:11"><name pos:start="48:8" pos:end="48:11">val1</name></expr></argument>,<argument pos:start="48:13" pos:end="48:16"><expr pos:start="48:13" pos:end="48:16"><literal type="string" pos:start="48:13" pos:end="48:16">"%d"</literal></expr></argument>,<argument pos:start="48:18" pos:end="48:26"><expr pos:start="48:18" pos:end="48:26"><operator pos:start="48:18" pos:end="48:18">&amp;</operator> <name pos:start="48:20" pos:end="48:26">valeur1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block" pos:start="49:1" pos:end="49:42">/* RÃ©cuperation de lÂ´opÃ©rateur */</comment>
<expr_stmt pos:start="50:1" pos:end="50:18"><expr pos:start="50:1" pos:end="50:17"><name pos:start="50:1" pos:end="50:9">operation</name><operator pos:start="50:10" pos:end="50:10">=</operator><operator pos:start="50:11" pos:end="50:11">*</operator><operator pos:start="50:12" pos:end="50:12">(</operator><name pos:start="50:13" pos:end="50:14">ch</name><operator pos:start="50:15" pos:end="50:15">+</operator><name pos:start="50:16" pos:end="50:16">i</name><operator pos:start="50:17" pos:end="50:17">)</operator></expr>;</expr_stmt>
<comment type="block" pos:start="51:1" pos:end="52:26">/* Extraction de la chaÃ®ne de caractÃ¨re correspondant au
deuxiÃ¨me opÃ©rande */</comment>
<expr_stmt pos:start="53:1" pos:end="53:24"><expr pos:start="53:1" pos:end="53:23"><name pos:start="53:1" pos:end="53:6">lgval2</name><operator pos:start="53:7" pos:end="53:7">=</operator><call pos:start="53:8" pos:end="53:17"><name pos:start="53:8" pos:end="53:13">strlen</name><argument_list pos:start="53:14" pos:end="53:17">(<argument pos:start="53:15" pos:end="53:16"><expr pos:start="53:15" pos:end="53:16"><name pos:start="53:15" pos:end="53:16">ch</name></expr></argument>)</argument_list></call><operator pos:start="53:18" pos:end="53:18">-</operator><operator pos:start="53:19" pos:end="53:19">(</operator><name pos:start="53:20" pos:end="53:20">i</name><operator pos:start="53:21" pos:end="53:21">+</operator><literal type="number" pos:start="53:22" pos:end="53:22">1</literal><operator pos:start="53:23" pos:end="53:23">)</operator></expr>;</expr_stmt>
<expr_stmt pos:start="54:1" pos:end="54:45"><expr pos:start="54:1" pos:end="54:44"><name pos:start="54:1" pos:end="54:4">val2</name><operator pos:start="54:5" pos:end="54:5">=</operator><operator pos:start="54:6" pos:end="54:6">(</operator><name pos:start="54:7" pos:end="54:10">char</name><operator pos:start="54:11" pos:end="54:11">*</operator><operator pos:start="54:12" pos:end="54:12">)</operator> <call pos:start="54:14" pos:end="54:44"><name pos:start="54:14" pos:end="54:19">malloc</name><argument_list pos:start="54:20" pos:end="54:44">(<argument pos:start="54:21" pos:end="54:43"><expr pos:start="54:21" pos:end="54:43"><operator pos:start="54:21" pos:end="54:21">(</operator><name pos:start="54:22" pos:end="54:27">lgval2</name><operator pos:start="54:28" pos:end="54:28">+</operator><literal type="number" pos:start="54:29" pos:end="54:29">1</literal><operator pos:start="54:30" pos:end="54:30">)</operator><operator pos:start="54:31" pos:end="54:31">*</operator><sizeof pos:start="54:32" pos:end="54:43">sizeof<argument_list pos:start="54:38" pos:end="54:43">(<argument pos:start="54:39" pos:end="54:42"><expr pos:start="54:39" pos:end="54:42"><name pos:start="54:39" pos:end="54:42">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="55:1" pos:end="55:28"><expr pos:start="55:1" pos:end="55:27"><call pos:start="55:1" pos:end="55:27"><name pos:start="55:1" pos:end="55:7">extract</name><argument_list pos:start="55:8" pos:end="55:27">(<argument pos:start="55:9" pos:end="55:10"><expr pos:start="55:9" pos:end="55:10"><name pos:start="55:9" pos:end="55:10">ch</name></expr></argument>,<argument pos:start="55:12" pos:end="55:15"><expr pos:start="55:12" pos:end="55:15"><name pos:start="55:12" pos:end="55:15">val2</name></expr></argument>,<argument pos:start="55:17" pos:end="55:19"><expr pos:start="55:17" pos:end="55:19"><name pos:start="55:17" pos:end="55:17">i</name><operator pos:start="55:18" pos:end="55:18">+</operator><literal type="number" pos:start="55:19" pos:end="55:19">1</literal></expr></argument>,<argument pos:start="55:21" pos:end="55:26"><expr pos:start="55:21" pos:end="55:26"><name pos:start="55:21" pos:end="55:26">lgval2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block" pos:start="56:1" pos:end="56:62">/* Transformation de la chaÃ®ne de caractÃ¨re en entier */</comment>
<expr_stmt pos:start="57:1" pos:end="57:27"><expr pos:start="57:1" pos:end="57:26"><call pos:start="57:1" pos:end="57:26"><name pos:start="57:1" pos:end="57:6">sscanf</name><argument_list pos:start="57:7" pos:end="57:26">(<argument pos:start="57:8" pos:end="57:11"><expr pos:start="57:8" pos:end="57:11"><name pos:start="57:8" pos:end="57:11">val2</name></expr></argument>,<argument pos:start="57:13" pos:end="57:16"><expr pos:start="57:13" pos:end="57:16"><literal type="string" pos:start="57:13" pos:end="57:16">"%d"</literal></expr></argument>,<argument pos:start="57:18" pos:end="57:25"><expr pos:start="57:18" pos:end="57:25"><operator pos:start="57:18" pos:end="57:18">&amp;</operator><name pos:start="57:19" pos:end="57:25">valeur2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block" pos:start="58:1" pos:end="58:37">/* Traitement de lÂ´opÃ©ration */</comment>
<switch pos:start="59:1" pos:end="79:1">switch<condition pos:start="59:7" pos:end="59:17">(<expr pos:start="59:8" pos:end="59:16"><name pos:start="59:8" pos:end="59:16">operation</name></expr>)</condition>
<block pos:start="60:1" pos:end="79:1">{<block_content pos:start="61:1" pos:end="78:1">
<case pos:start="61:1" pos:end="61:9">case <expr pos:start="61:6" pos:end="61:8"><literal type="char" pos:start="61:6" pos:end="61:8">'+'</literal></expr>:</case>
<expr_stmt pos:start="62:1" pos:end="62:25"><expr pos:start="62:1" pos:end="62:24"><name pos:start="62:1" pos:end="62:8">resultat</name><operator pos:start="62:9" pos:end="62:9">=</operator><name pos:start="62:10" pos:end="62:16">valeur1</name><operator pos:start="62:17" pos:end="62:17">+</operator><name pos:start="62:18" pos:end="62:24">valeur2</name></expr>;</expr_stmt>
<break pos:start="63:1" pos:end="63:6">break;</break>
<case pos:start="64:1" pos:end="64:9">case <expr pos:start="64:6" pos:end="64:8"><literal type="char" pos:start="64:6" pos:end="64:8">'-'</literal></expr>:</case>
<expr_stmt pos:start="65:1" pos:end="65:25"><expr pos:start="65:1" pos:end="65:24"><name pos:start="65:1" pos:end="65:8">resultat</name><operator pos:start="65:9" pos:end="65:9">=</operator><name pos:start="65:10" pos:end="65:16">valeur1</name><operator pos:start="65:17" pos:end="65:17">-</operator><name pos:start="65:18" pos:end="65:24">valeur2</name></expr>;</expr_stmt>
<break pos:start="66:1" pos:end="66:6">break;</break>
<case pos:start="67:1" pos:end="67:9">case <expr pos:start="67:6" pos:end="67:8"><literal type="char" pos:start="67:6" pos:end="67:8">'*'</literal></expr>:</case>
<expr_stmt pos:start="68:1" pos:end="68:25"><expr pos:start="68:1" pos:end="68:24"><name pos:start="68:1" pos:end="68:8">resultat</name><operator pos:start="68:9" pos:end="68:9">=</operator><name pos:start="68:10" pos:end="68:16">valeur1</name><operator pos:start="68:17" pos:end="68:17">*</operator><name pos:start="68:18" pos:end="68:24">valeur2</name></expr>;</expr_stmt>
<break pos:start="69:1" pos:end="69:6">break;</break>
<case pos:start="70:1" pos:end="70:9">case <expr pos:start="70:6" pos:end="70:8"><literal type="char" pos:start="70:6" pos:end="70:8">'/'</literal></expr>:</case>
<if_stmt pos:start="71:1" pos:end="78:1"><if pos:start="71:1" pos:end="72:25">if<condition pos:start="71:3" pos:end="71:16">(<expr pos:start="71:4" pos:end="71:15"><name pos:start="71:4" pos:end="71:10">valeur2</name> <operator pos:start="71:12" pos:end="71:13">!=</operator> <literal type="number" pos:start="71:15" pos:end="71:15">0</literal></expr>)</condition><block type="pseudo" pos:start="72:1" pos:end="72:25"><block_content pos:start="72:1" pos:end="72:25">
<expr_stmt pos:start="72:1" pos:end="72:25"><expr pos:start="72:1" pos:end="72:24"><name pos:start="72:1" pos:end="72:8">resultat</name><operator pos:start="72:9" pos:end="72:9">=</operator><name pos:start="72:10" pos:end="72:16">valeur1</name><operator pos:start="72:17" pos:end="72:17">/</operator><name pos:start="72:18" pos:end="72:24">valeur2</name></expr>;</expr_stmt></block_content></block></if>
<else pos:start="73:1" pos:end="78:1">else
<block pos:start="74:1" pos:end="78:1">{<block_content pos:start="75:1" pos:end="77:8">
<expr_stmt pos:start="75:1" pos:end="75:11"><expr pos:start="75:1" pos:end="75:10"><name pos:start="75:1" pos:end="75:8">resultat</name><operator pos:start="75:9" pos:end="75:9">=</operator><literal type="number" pos:start="75:10" pos:end="75:10">0</literal></expr>;</expr_stmt>
<expr_stmt pos:start="76:1" pos:end="76:47"><expr pos:start="76:1" pos:end="76:46"><call pos:start="76:1" pos:end="76:46"><name pos:start="76:1" pos:end="76:6">printf</name><argument_list pos:start="76:7" pos:end="76:46">(<argument pos:start="76:8" pos:end="76:45"><expr pos:start="76:8" pos:end="76:45"><literal type="string" pos:start="76:8" pos:end="76:45">"Erreur : impossible de diviser par 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="77:1" pos:end="77:8"><expr pos:start="77:1" pos:end="77:7"><call pos:start="77:1" pos:end="77:7"><name pos:start="77:1" pos:end="77:4">exit</name><argument_list pos:start="77:5" pos:end="77:7">(<argument pos:start="77:6" pos:end="77:6"><expr pos:start="77:6" pos:end="77:6"><literal type="number" pos:start="77:6" pos:end="77:6">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></switch>
<return pos:start="80:1" pos:end="80:16">return <expr pos:start="80:8" pos:end="80:15"><name pos:start="80:8" pos:end="80:15">resultat</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="82:1" pos:end="84:34">/* Fonction qui extrait une sous-chaÃ®ne de chaÃ®ne1 dans chaÃ®ne2,
de nb caractÃ¨res Ã 
partir du caractÃ¨re dÃ©but */</comment>
<function pos:start="85:1" pos:end="98:1"><type pos:start="85:1" pos:end="85:4"><name pos:start="85:1" pos:end="85:4">void</name></type> <name pos:start="85:6" pos:end="85:12">extract</name><parameter_list pos:start="85:13" pos:end="85:57">(<parameter pos:start="85:14" pos:end="85:24"><decl pos:start="85:14" pos:end="85:24"><type pos:start="85:14" pos:end="85:24"><name pos:start="85:14" pos:end="85:17">char</name><modifier pos:start="85:18" pos:end="85:18">*</modifier></type> <name pos:start="85:20" pos:end="85:24">char1</name></decl></parameter>, <parameter pos:start="85:27" pos:end="85:37"><decl pos:start="85:27" pos:end="85:37"><type pos:start="85:27" pos:end="85:37"><name pos:start="85:27" pos:end="85:30">char</name><modifier pos:start="85:31" pos:end="85:31">*</modifier></type> <name pos:start="85:33" pos:end="85:37">char2</name></decl></parameter>, <parameter pos:start="85:40" pos:end="85:48"><decl pos:start="85:40" pos:end="85:48"><type pos:start="85:40" pos:end="85:48"><name pos:start="85:40" pos:end="85:42">int</name></type> <name pos:start="85:44" pos:end="85:48">debut</name></decl></parameter>, <parameter pos:start="85:51" pos:end="85:56"><decl pos:start="85:51" pos:end="85:56"><type pos:start="85:51" pos:end="85:56"><name pos:start="85:51" pos:end="85:53">int</name></type> <name pos:start="85:55" pos:end="85:56">nb</name></decl></parameter>)</parameter_list>
<block pos:start="86:1" pos:end="98:1">{<block_content pos:start="87:1" pos:end="97:11">
<decl_stmt pos:start="87:1" pos:end="87:6"><decl pos:start="87:1" pos:end="87:5"><type pos:start="87:1" pos:end="87:3"><name pos:start="87:1" pos:end="87:3">int</name></type> <name pos:start="87:5" pos:end="87:5">i</name></decl>;</decl_stmt>
<expr_stmt pos:start="88:1" pos:end="88:19"><expr pos:start="88:1" pos:end="88:18"><name pos:start="88:1" pos:end="88:5">char1</name><operator pos:start="88:6" pos:end="88:6">=</operator> <name pos:start="88:8" pos:end="88:12">char1</name><operator pos:start="88:13" pos:end="88:13">+</operator><name pos:start="88:14" pos:end="88:18">debut</name></expr>;</expr_stmt>
<expr_stmt pos:start="89:1" pos:end="89:4"><expr pos:start="89:1" pos:end="89:3"><name pos:start="89:1" pos:end="89:1">i</name><operator pos:start="89:2" pos:end="89:2">=</operator><literal type="number" pos:start="89:3" pos:end="89:3">0</literal></expr>;</expr_stmt>
<while pos:start="90:1" pos:end="96:1">while<condition pos:start="90:6" pos:end="90:11">(<expr pos:start="90:7" pos:end="90:10"><name pos:start="90:7" pos:end="90:7">i</name><operator pos:start="90:8" pos:end="90:8">&lt;</operator><name pos:start="90:9" pos:end="90:10">nb</name></expr>)</condition>
<block pos:start="91:1" pos:end="96:1">{<block_content pos:start="91:2" pos:end="95:4"><expr_stmt pos:start="91:2" pos:end="92:14"><expr pos:start="91:2" pos:end="92:13"><operator pos:start="91:2" pos:end="91:2">*</operator>
<name pos:start="92:1" pos:end="92:5">char2</name><operator pos:start="92:6" pos:end="92:6">=</operator><operator pos:start="92:7" pos:end="92:7">*</operator> <name pos:start="92:9" pos:end="92:13">char1</name></expr>;</expr_stmt>
<expr_stmt pos:start="93:1" pos:end="93:8"><expr pos:start="93:1" pos:end="93:7"><name pos:start="93:1" pos:end="93:5">char1</name><operator pos:start="93:6" pos:end="93:7">++</operator></expr>;</expr_stmt>
<expr_stmt pos:start="94:1" pos:end="94:8"><expr pos:start="94:1" pos:end="94:7"><name pos:start="94:1" pos:end="94:5">char2</name><operator pos:start="94:6" pos:end="94:7">++</operator></expr>;</expr_stmt>
<expr_stmt pos:start="95:1" pos:end="95:4"><expr pos:start="95:1" pos:end="95:3"><name pos:start="95:1" pos:end="95:1">i</name><operator pos:start="95:2" pos:end="95:3">++</operator></expr>;</expr_stmt>
</block_content>}</block></while><expr_stmt pos:start="96:2" pos:end="97:11"><expr pos:start="96:2" pos:end="97:10"><operator pos:start="96:2" pos:end="96:2">*</operator>
<name pos:start="97:1" pos:end="97:5">char2</name><operator pos:start="97:6" pos:end="97:6">=</operator><literal type="char" pos:start="97:7" pos:end="97:10">'\n'</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function pos:start="99:1" pos:end="112:1"><type pos:start="99:1" pos:end="99:3"><name pos:start="99:1" pos:end="99:3">int</name></type> <name pos:start="99:5" pos:end="99:8">main</name><parameter_list pos:start="99:9" pos:end="99:31">(<parameter pos:start="99:10" pos:end="99:17"><decl pos:start="99:10" pos:end="99:17"><type pos:start="99:10" pos:end="99:17"><name pos:start="99:10" pos:end="99:12">int</name></type> <name pos:start="99:14" pos:end="99:17">argc</name></decl></parameter>, <parameter pos:start="99:20" pos:end="99:30"><decl pos:start="99:20" pos:end="99:30"><type pos:start="99:20" pos:end="99:30"><name pos:start="99:20" pos:end="99:23">char</name><modifier pos:start="99:24" pos:end="99:24">*</modifier><modifier pos:start="99:25" pos:end="99:25">*</modifier></type> <name pos:start="99:27" pos:end="99:30">argv</name></decl></parameter>)</parameter_list>
<block pos:start="100:1" pos:end="112:1">{<block_content pos:start="101:1" pos:end="111:1">
<decl_stmt pos:start="101:1" pos:end="101:8"><decl pos:start="101:1" pos:end="101:7"><type pos:start="101:1" pos:end="101:3"><name pos:start="101:1" pos:end="101:3">int</name></type> <name pos:start="101:5" pos:end="101:7">res</name></decl>;</decl_stmt>
<if_stmt pos:start="102:1" pos:end="111:1"><if pos:start="102:1" pos:end="106:1">if<condition pos:start="102:3" pos:end="102:11">(<expr pos:start="102:4" pos:end="102:10"><name pos:start="102:4" pos:end="102:7">argc</name><operator pos:start="102:8" pos:end="102:9">!=</operator><literal type="number" pos:start="102:10" pos:end="102:10">2</literal></expr>)</condition>
<block pos:start="103:1" pos:end="106:1">{<block_content pos:start="104:1" pos:end="105:15">
<expr_stmt pos:start="104:1" pos:end="105:15"><expr pos:start="104:1" pos:end="105:14"><call pos:start="104:1" pos:end="105:14"><name pos:start="104:1" pos:end="104:6">printf</name><argument_list pos:start="104:7" pos:end="105:14">(<argument pos:start="104:8" pos:end="105:13"><expr pos:start="104:8" pos:end="105:13"><literal type="string" pos:start="104:8" pos:end="105:13">"Erreur, utilisation du programme : eval1
&lt;expression&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else pos:start="107:1" pos:end="111:1">else
<block pos:start="108:1" pos:end="111:1">{<block_content pos:start="109:1" pos:end="110:59">
<expr_stmt pos:start="109:1" pos:end="109:19"><expr pos:start="109:1" pos:end="109:18"><name pos:start="109:1" pos:end="109:3">res</name><operator pos:start="109:4" pos:end="109:4">=</operator><call pos:start="109:5" pos:end="109:18"><name pos:start="109:5" pos:end="109:9">eval1</name><argument_list pos:start="109:10" pos:end="109:18">(<argument pos:start="109:11" pos:end="109:17"><expr pos:start="109:11" pos:end="109:17"><name pos:start="109:11" pos:end="109:17"><name pos:start="109:11" pos:end="109:14">argv</name><index pos:start="109:15" pos:end="109:17">[<expr pos:start="109:16" pos:end="109:16"><literal type="number" pos:start="109:16" pos:end="109:16">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="110:1" pos:end="110:59"><expr pos:start="110:1" pos:end="110:58"><call pos:start="110:1" pos:end="110:58"><name pos:start="110:1" pos:end="110:6">printf</name><argument_list pos:start="110:7" pos:end="110:58">(<argument pos:start="110:8" pos:end="110:53"><expr pos:start="110:8" pos:end="110:53"><literal type="string" pos:start="110:8" pos:end="110:53">"Le rÃ©sultat de lÂ´opÃ©ration est : %d"</literal></expr></argument>,<argument pos:start="110:55" pos:end="110:57"><expr pos:start="110:55" pos:end="110:57"><name pos:start="110:55" pos:end="110:57">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
