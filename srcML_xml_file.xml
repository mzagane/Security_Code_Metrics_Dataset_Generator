<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" url="E:\ZM\Research\My_Works\Current_Works\Vulnerabilities_Prediction\Using_Security-specific_Code_Metrics_to_Predict_C-Cpp_Code_Vulnerabilities\Tools\Data_Preparation\My_Dataset_Generation\Security_Code_Metrics_Dataset_Generator\tests2" pos:tabs="8">

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="E:/ZM/Research/My_Works/Current_Works/Vulnerabilities_Prediction/Using_Security-specific_Code_Metrics_to_Predict_C-Cpp_Code_Vulnerabilities/Tools/Data_Preparation/My_Dataset_Generation/Security_Code_Metrics_Dataset_Generator/tests2/0_0.c" pos:tabs="8" hash="3588f137c6cb210fe8e9e689a10d1cd35aa8707f"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:30">vdadec_init</name><parameter_list pos:start="1:31" pos:end="1:53">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:47"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="145:1">{<block_content pos:start="5:5" pos:end="143:14">

    <decl_stmt pos:start="5:5" pos:end="5:46"><decl pos:start="5:5" pos:end="5:45"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">VDADecoderContext</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:26">ctx</name> <init pos:start="5:28" pos:end="5:45">= <expr pos:start="5:30" pos:end="5:45"><name pos:start="5:30" pos:end="5:45"><name pos:start="5:30" pos:end="5:34">avctx</name><operator pos:start="5:35" pos:end="5:36">-&gt;</operator><name pos:start="5:37" pos:end="5:45">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:47"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:22">vda_context</name></name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:31">vda_ctx</name> <init pos:start="7:33" pos:end="7:47">= <expr pos:start="7:35" pos:end="7:47"><operator pos:start="7:35" pos:end="7:35">&amp;</operator><name pos:start="7:36" pos:end="7:47"><name pos:start="7:36" pos:end="7:38">ctx</name><operator pos:start="7:39" pos:end="7:40">-&gt;</operator><name pos:start="7:41" pos:end="7:47">vda_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">OSStatus</name></type> <name pos:start="9:14" pos:end="9:19">status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:30"><expr pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:7">ctx</name><operator pos:start="15:8" pos:end="15:9">-&gt;</operator><name pos:start="15:10" pos:end="15:25">h264_initialized</name></name> <operator pos:start="15:27" pos:end="15:27">=</operator> <literal type="number" pos:start="15:29" pos:end="15:29">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:32">/* init pix_fmts of codec */</comment>

    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="21:38">(<expr pos:start="21:9" pos:end="21:37"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:37"><name pos:start="21:10" pos:end="21:28">ff_h264_vda_decoder</name><operator pos:start="21:29" pos:end="21:29">.</operator><name pos:start="21:30" pos:end="21:37">pix_fmts</name></name></expr>)</condition> <block pos:start="21:40" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:55">

        <if_stmt pos:start="23:9" pos:end="29:55"><if pos:start="23:9" pos:end="25:66">if <condition pos:start="23:12" pos:end="23:80">(<expr pos:start="23:13" pos:end="23:79"><name pos:start="23:13" pos:end="23:42">kCFCoreFoundationVersionNumber</name> <operator pos:start="23:44" pos:end="23:44">&lt;</operator> <name pos:start="23:46" pos:end="23:79">kCFCoreFoundationVersionNumber10_7</name></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:66"><block_content pos:start="25:13" pos:end="25:66">

            <expr_stmt pos:start="25:13" pos:end="25:66"><expr pos:start="25:13" pos:end="25:65"><name pos:start="25:13" pos:end="25:40"><name pos:start="25:13" pos:end="25:31">ff_h264_vda_decoder</name><operator pos:start="25:32" pos:end="25:32">.</operator><name pos:start="25:33" pos:end="25:40">pix_fmts</name></name> <operator pos:start="25:42" pos:end="25:42">=</operator> <name pos:start="25:44" pos:end="25:65">vda_pixfmts_prior_10_7</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="27:9" pos:end="29:55">else<block type="pseudo" pos:start="29:13" pos:end="29:55"><block_content pos:start="29:13" pos:end="29:55">

            <expr_stmt pos:start="29:13" pos:end="29:55"><expr pos:start="29:13" pos:end="29:54"><name pos:start="29:13" pos:end="29:40"><name pos:start="29:13" pos:end="29:31">ff_h264_vda_decoder</name><operator pos:start="29:32" pos:end="29:32">.</operator><name pos:start="29:33" pos:end="29:40">pix_fmts</name></name> <operator pos:start="29:42" pos:end="29:42">=</operator> <name pos:start="29:44" pos:end="29:54">vda_pixfmts</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:18">/* init vda */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:51"><expr pos:start="37:5" pos:end="37:50"><call pos:start="37:5" pos:end="37:50"><name pos:start="37:5" pos:end="37:10">memset</name><argument_list pos:start="37:11" pos:end="37:50">(<argument pos:start="37:12" pos:end="37:18"><expr pos:start="37:12" pos:end="37:18"><name pos:start="37:12" pos:end="37:18">vda_ctx</name></expr></argument>, <argument pos:start="37:21" pos:end="37:21"><expr pos:start="37:21" pos:end="37:21"><literal type="number" pos:start="37:21" pos:end="37:21">0</literal></expr></argument>, <argument pos:start="37:24" pos:end="37:49"><expr pos:start="37:24" pos:end="37:49"><sizeof pos:start="37:24" pos:end="37:49">sizeof<argument_list pos:start="37:30" pos:end="37:49">(<argument pos:start="37:31" pos:end="37:48"><expr pos:start="37:31" pos:end="37:48">struct <name pos:start="37:38" pos:end="37:48">vda_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:34"><expr pos:start="39:5" pos:end="39:33"><name pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:11">vda_ctx</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:18">width</name></name> <operator pos:start="39:20" pos:end="39:20">=</operator> <name pos:start="39:22" pos:end="39:33"><name pos:start="39:22" pos:end="39:26">avctx</name><operator pos:start="39:27" pos:end="39:28">-&gt;</operator><name pos:start="39:29" pos:end="39:33">width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:36"><expr pos:start="41:5" pos:end="41:35"><name pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:11">vda_ctx</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:19">height</name></name> <operator pos:start="41:21" pos:end="41:21">=</operator> <name pos:start="41:23" pos:end="41:35"><name pos:start="41:23" pos:end="41:27">avctx</name><operator pos:start="41:28" pos:end="41:29">-&gt;</operator><name pos:start="41:30" pos:end="41:35">height</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:29"><expr pos:start="43:5" pos:end="43:28"><name pos:start="43:5" pos:end="43:19"><name pos:start="43:5" pos:end="43:11">vda_ctx</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:19">format</name></name> <operator pos:start="43:21" pos:end="43:21">=</operator> <literal type="char" pos:start="43:23" pos:end="43:28">'avc1'</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:35"><expr pos:start="45:5" pos:end="45:34"><name pos:start="45:5" pos:end="45:30"><name pos:start="45:5" pos:end="45:11">vda_ctx</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:30">use_sync_decoding</name></name> <operator pos:start="45:32" pos:end="45:32">=</operator> <literal type="number" pos:start="45:34" pos:end="45:34">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:32"><expr pos:start="47:5" pos:end="47:31"><name pos:start="47:5" pos:end="47:27"><name pos:start="47:5" pos:end="47:11">vda_ctx</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:27">use_ref_buffer</name></name> <operator pos:start="47:29" pos:end="47:29">=</operator> <literal type="number" pos:start="47:31" pos:end="47:31">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:68"><expr pos:start="49:5" pos:end="49:67"><name pos:start="49:5" pos:end="49:16"><name pos:start="49:5" pos:end="49:7">ctx</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:16">pix_fmt</name></name> <operator pos:start="49:18" pos:end="49:18">=</operator> <call pos:start="49:20" pos:end="49:67"><name pos:start="49:20" pos:end="49:36"><name pos:start="49:20" pos:end="49:24">avctx</name><operator pos:start="49:25" pos:end="49:26">-&gt;</operator><name pos:start="49:27" pos:end="49:36">get_format</name></name><argument_list pos:start="49:37" pos:end="49:67">(<argument pos:start="49:38" pos:end="49:42"><expr pos:start="49:38" pos:end="49:42"><name pos:start="49:38" pos:end="49:42">avctx</name></expr></argument>, <argument pos:start="49:45" pos:end="49:66"><expr pos:start="49:45" pos:end="49:66"><name pos:start="49:45" pos:end="49:66"><name pos:start="49:45" pos:end="49:49">avctx</name><operator pos:start="49:50" pos:end="49:51">-&gt;</operator><name pos:start="49:52" pos:end="49:56">codec</name><operator pos:start="49:57" pos:end="49:58">-&gt;</operator><name pos:start="49:59" pos:end="49:66">pix_fmts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="51:5" pos:end="83:5">switch <condition pos:start="51:12" pos:end="51:25">(<expr pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:15">ctx</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:24">pix_fmt</name></name></expr>)</condition> <block pos:start="51:27" pos:end="83:5">{<block_content pos:start="53:5" pos:end="81:20">

    <case pos:start="53:5" pos:end="53:28">case <expr pos:start="53:10" pos:end="53:27"><name pos:start="53:10" pos:end="53:27">AV_PIX_FMT_UYVY422</name></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:42"><expr pos:start="55:9" pos:end="55:41"><name pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:15">vda_ctx</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:32">cv_pix_fmt_type</name></name> <operator pos:start="55:34" pos:end="55:34">=</operator> <literal type="char" pos:start="55:36" pos:end="55:41">'2vuy'</literal></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:28">case <expr pos:start="59:10" pos:end="59:27"><name pos:start="59:10" pos:end="59:27">AV_PIX_FMT_YUYV422</name></expr>:</case>

        <expr_stmt pos:start="61:9" pos:end="61:42"><expr pos:start="61:9" pos:end="61:41"><name pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:15">vda_ctx</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:32">cv_pix_fmt_type</name></name> <operator pos:start="61:34" pos:end="61:34">=</operator> <literal type="char" pos:start="61:36" pos:end="61:41">'yuvs'</literal></expr>;</expr_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    <case pos:start="65:5" pos:end="65:25">case <expr pos:start="65:10" pos:end="65:24"><name pos:start="65:10" pos:end="65:24">AV_PIX_FMT_NV12</name></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:42"><expr pos:start="67:9" pos:end="67:41"><name pos:start="67:9" pos:end="67:32"><name pos:start="67:9" pos:end="67:15">vda_ctx</name><operator pos:start="67:16" pos:end="67:17">-&gt;</operator><name pos:start="67:18" pos:end="67:32">cv_pix_fmt_type</name></name> <operator pos:start="67:34" pos:end="67:34">=</operator> <literal type="char" pos:start="67:36" pos:end="67:41">'420v'</literal></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <case pos:start="71:5" pos:end="71:28">case <expr pos:start="71:10" pos:end="71:27"><name pos:start="71:10" pos:end="71:27">AV_PIX_FMT_YUV420P</name></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:42"><expr pos:start="73:9" pos:end="73:41"><name pos:start="73:9" pos:end="73:32"><name pos:start="73:9" pos:end="73:15">vda_ctx</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:32">cv_pix_fmt_type</name></name> <operator pos:start="73:34" pos:end="73:34">=</operator> <literal type="char" pos:start="73:36" pos:end="73:41">'y420'</literal></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <default pos:start="77:5" pos:end="77:12">default:</default>

        <expr_stmt pos:start="79:9" pos:end="79:86"><expr pos:start="79:9" pos:end="79:85"><call pos:start="79:9" pos:end="79:85"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:85">(<argument pos:start="79:16" pos:end="79:20"><expr pos:start="79:16" pos:end="79:20"><name pos:start="79:16" pos:end="79:20">avctx</name></expr></argument>, <argument pos:start="79:23" pos:end="79:34"><expr pos:start="79:23" pos:end="79:34"><name pos:start="79:23" pos:end="79:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:37" pos:end="79:68"><expr pos:start="79:37" pos:end="79:68"><literal type="string" pos:start="79:37" pos:end="79:68">"Unsupported pixel format: %d\n"</literal></expr></argument>, <argument pos:start="79:71" pos:end="79:84"><expr pos:start="79:71" pos:end="79:84"><name pos:start="79:71" pos:end="79:84"><name pos:start="79:71" pos:end="79:75">avctx</name><operator pos:start="79:76" pos:end="79:77">-&gt;</operator><name pos:start="79:78" pos:end="79:84">pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="81:9" pos:end="81:20">goto <name pos:start="81:14" pos:end="81:19">failed</name>;</goto>

    </block_content>}</block></switch>

    <expr_stmt pos:start="85:5" pos:end="87:76"><expr pos:start="85:5" pos:end="87:75"><name pos:start="85:5" pos:end="85:10">status</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <call pos:start="85:14" pos:end="87:75"><name pos:start="85:14" pos:end="85:34">ff_vda_create_decoder</name><argument_list pos:start="85:35" pos:end="87:75">(<argument pos:start="85:36" pos:end="85:42"><expr pos:start="85:36" pos:end="85:42"><name pos:start="85:36" pos:end="85:42">vda_ctx</name></expr></argument>,

                                   <argument pos:start="87:36" pos:end="87:51"><expr pos:start="87:36" pos:end="87:51"><name pos:start="87:36" pos:end="87:51"><name pos:start="87:36" pos:end="87:40">avctx</name><operator pos:start="87:41" pos:end="87:42">-&gt;</operator><name pos:start="87:43" pos:end="87:51">extradata</name></name></expr></argument>, <argument pos:start="87:54" pos:end="87:74"><expr pos:start="87:54" pos:end="87:74"><name pos:start="87:54" pos:end="87:74"><name pos:start="87:54" pos:end="87:58">avctx</name><operator pos:start="87:59" pos:end="87:60">-&gt;</operator><name pos:start="87:61" pos:end="87:74">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="97:5"><if pos:start="89:5" pos:end="97:5">if <condition pos:start="89:8" pos:end="89:35">(<expr pos:start="89:9" pos:end="89:34"><name pos:start="89:9" pos:end="89:14">status</name> <operator pos:start="89:16" pos:end="89:17">!=</operator> <name pos:start="89:19" pos:end="89:34">kVDADecoderNoErr</name></expr>)</condition> <block pos:start="89:37" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:20">

        <expr_stmt pos:start="91:9" pos:end="93:61"><expr pos:start="91:9" pos:end="93:60"><call pos:start="91:9" pos:end="93:60"><name pos:start="91:9" pos:end="91:14">av_log</name><argument_list pos:start="91:15" pos:end="93:60">(<argument pos:start="91:16" pos:end="91:20"><expr pos:start="91:16" pos:end="91:20"><name pos:start="91:16" pos:end="91:20">avctx</name></expr></argument>, <argument pos:start="91:23" pos:end="91:34"><expr pos:start="91:23" pos:end="91:34"><name pos:start="91:23" pos:end="91:34">AV_LOG_ERROR</name></expr></argument>,

                <argument pos:start="93:17" pos:end="93:51"><expr pos:start="93:17" pos:end="93:51"><literal type="string" pos:start="93:17" pos:end="93:51">"Failed to init VDA decoder: %d.\n"</literal></expr></argument>, <argument pos:start="93:54" pos:end="93:59"><expr pos:start="93:54" pos:end="93:59"><name pos:start="93:54" pos:end="93:59">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="95:9" pos:end="95:20">goto <name pos:start="95:14" pos:end="95:19">failed</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:37"><expr pos:start="99:5" pos:end="99:36"><name pos:start="99:5" pos:end="99:26"><name pos:start="99:5" pos:end="99:9">avctx</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:26">hwaccel_context</name></name> <operator pos:start="99:28" pos:end="99:28">=</operator> <name pos:start="99:30" pos:end="99:36">vda_ctx</name></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:36">/* changes callback functions */</comment>

    <expr_stmt pos:start="105:5" pos:end="105:35"><expr pos:start="105:5" pos:end="105:34"><name pos:start="105:5" pos:end="105:21"><name pos:start="105:5" pos:end="105:9">avctx</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:21">get_format</name></name> <operator pos:start="105:23" pos:end="105:23">=</operator> <name pos:start="105:25" pos:end="105:34">get_format</name></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="110:0"><expr pos:start="107:5" pos:end="107:36"><name pos:start="107:5" pos:end="107:22"><name pos:start="107:5" pos:end="107:9">avctx</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:22">get_buffer2</name></name> <operator pos:start="107:24" pos:end="107:24">=</operator> <name pos:start="107:26" pos:end="107:36">get_buffer2</name></expr>;</expr_stmt>

<cpp:if pos:start="109:1" pos:end="109:21">#<cpp:directive pos:start="109:2" pos:end="109:3">if</cpp:directive> <expr pos:start="109:5" pos:end="109:21"><name pos:start="109:5" pos:end="109:21">FF_API_GET_BUFFER</name></expr></cpp:if>

    <comment type="line" pos:start="111:5" pos:end="111:43">// force the old get_buffer to be empty</comment>

    <expr_stmt pos:start="113:5" pos:end="116:0"><expr pos:start="113:5" pos:end="113:28"><name pos:start="113:5" pos:end="113:21"><name pos:start="113:5" pos:end="113:9">avctx</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:21">get_buffer</name></name> <operator pos:start="113:23" pos:end="113:23">=</operator> <name pos:start="113:25" pos:end="113:28">NULL</name></expr>;</expr_stmt>

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="119:5" pos:end="119:28">/* init H.264 decoder */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:38"><expr pos:start="121:5" pos:end="121:37"><name pos:start="121:5" pos:end="121:7">ret</name> <operator pos:start="121:9" pos:end="121:9">=</operator> <call pos:start="121:11" pos:end="121:37"><name pos:start="121:11" pos:end="121:30"><name pos:start="121:11" pos:end="121:25">ff_h264_decoder</name><operator pos:start="121:26" pos:end="121:26">.</operator><name pos:start="121:27" pos:end="121:30">init</name></name><argument_list pos:start="121:31" pos:end="121:37">(<argument pos:start="121:32" pos:end="121:36"><expr pos:start="121:32" pos:end="121:36"><name pos:start="121:32" pos:end="121:36">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="129:5"><if pos:start="123:5" pos:end="129:5">if <condition pos:start="123:8" pos:end="123:16">(<expr pos:start="123:9" pos:end="123:15"><name pos:start="123:9" pos:end="123:11">ret</name> <operator pos:start="123:13" pos:end="123:13">&lt;</operator> <literal type="number" pos:start="123:15" pos:end="123:15">0</literal></expr>)</condition> <block pos:start="123:18" pos:end="129:5">{<block_content pos:start="125:9" pos:end="127:20">

        <expr_stmt pos:start="125:9" pos:end="125:71"><expr pos:start="125:9" pos:end="125:70"><call pos:start="125:9" pos:end="125:70"><name pos:start="125:9" pos:end="125:14">av_log</name><argument_list pos:start="125:15" pos:end="125:70">(<argument pos:start="125:16" pos:end="125:20"><expr pos:start="125:16" pos:end="125:20"><name pos:start="125:16" pos:end="125:20">avctx</name></expr></argument>, <argument pos:start="125:23" pos:end="125:34"><expr pos:start="125:23" pos:end="125:34"><name pos:start="125:23" pos:end="125:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="125:37" pos:end="125:69"><expr pos:start="125:37" pos:end="125:69"><literal type="string" pos:start="125:37" pos:end="125:69">"Failed to open H.264 decoder.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="127:9" pos:end="127:20">goto <name pos:start="127:14" pos:end="127:19">failed</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:30"><expr pos:start="131:5" pos:end="131:29"><name pos:start="131:5" pos:end="131:25"><name pos:start="131:5" pos:end="131:7">ctx</name><operator pos:start="131:8" pos:end="131:9">-&gt;</operator><name pos:start="131:10" pos:end="131:25">h264_initialized</name></name> <operator pos:start="131:27" pos:end="131:27">=</operator> <literal type="number" pos:start="131:29" pos:end="131:29">1</literal></expr>;</expr_stmt>



    <return pos:start="135:5" pos:end="135:13">return <expr pos:start="135:12" pos:end="135:12"><literal type="number" pos:start="135:12" pos:end="135:12">0</literal></expr>;</return>



<label pos:start="139:1" pos:end="139:7"><name pos:start="139:1" pos:end="139:6">failed</name>:</label>

    <expr_stmt pos:start="141:5" pos:end="141:24"><expr pos:start="141:5" pos:end="141:23"><call pos:start="141:5" pos:end="141:23"><name pos:start="141:5" pos:end="141:16">vdadec_close</name><argument_list pos:start="141:17" pos:end="141:23">(<argument pos:start="141:18" pos:end="141:22"><expr pos:start="141:18" pos:end="141:22"><name pos:start="141:18" pos:end="141:22">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="143:5" pos:end="143:14">return <expr pos:start="143:12" pos:end="143:13"><operator pos:start="143:12" pos:end="143:12">-</operator><literal type="number" pos:start="143:13" pos:end="143:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>

<unit revision="1.0.0" language="C" filename="E:/ZM/Research/My_Works/Current_Works/Vulnerabilities_Prediction/Using_Security-specific_Code_Metrics_to_Predict_C-Cpp_Code_Vulnerabilities/Tools/Data_Preparation/My_Dataset_Generation/Security_Code_Metrics_Dataset_Generator/tests2/0_00eval_1.c" pos:tabs="8" hash="1c661a1f59e833bdb204a57d1875b6e624e7c51d"><function pos:start="1:1" pos:end="155:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:9">eval1</name><parameter_list pos:start="1:10" pos:end="1:20">(<parameter pos:start="1:11" pos:end="1:19"><decl pos:start="1:11" pos:end="1:19"><type pos:start="1:11" pos:end="1:16"><name pos:start="1:11" pos:end="1:14">char</name> <modifier pos:start="1:16" pos:end="1:16">*</modifier></type> <name pos:start="1:18" pos:end="1:19">ch</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="155:1">{<block_content pos:start="3:1" pos:end="154:16">
<decl_stmt pos:start="3:1" pos:end="3:6"><decl pos:start="3:1" pos:end="3:5"><type pos:start="3:1" pos:end="3:3"><name pos:start="3:1" pos:end="3:3">int</name></type> <name pos:start="3:5" pos:end="3:5">i</name></decl>;</decl_stmt>
<decl_stmt pos:start="4:1" pos:end="4:21"><decl pos:start="4:1" pos:end="4:11"><type pos:start="4:1" pos:end="4:3"><name pos:start="4:1" pos:end="4:3">int</name></type> <name pos:start="4:5" pos:end="4:11">valeur1</name></decl>, <decl pos:start="4:14" pos:end="4:20"><type ref="prev" pos:start="4:1" pos:end="4:3"/><name pos:start="4:14" pos:end="4:20">valeur2</name></decl>;</decl_stmt>
<decl_stmt pos:start="5:1" pos:end="5:11"><decl pos:start="5:1" pos:end="5:10"><type pos:start="5:1" pos:end="5:3"><name pos:start="5:1" pos:end="5:3">int</name></type> <name pos:start="5:5" pos:end="5:10">lgval2</name></decl>;</decl_stmt>
<decl_stmt pos:start="6:1" pos:end="6:18"><decl pos:start="6:1" pos:end="6:10"><type pos:start="6:1" pos:end="6:6"><name pos:start="6:1" pos:end="6:4">char</name> <modifier pos:start="6:6" pos:end="6:6">*</modifier></type><name pos:start="6:7" pos:end="6:10">val1</name></decl>, <decl pos:start="6:13" pos:end="6:17"><type ref="prev" pos:start="6:1" pos:end="6:6"><modifier pos:start="6:13" pos:end="6:13">*</modifier></type><name pos:start="6:14" pos:end="6:17">val2</name></decl>;</decl_stmt>
<decl_stmt pos:start="7:1" pos:end="7:25"><decl pos:start="7:1" pos:end="7:24"><type pos:start="7:1" pos:end="7:6"><name pos:start="7:1" pos:end="7:4">char</name> <modifier pos:start="7:6" pos:end="7:6">*</modifier></type><name pos:start="7:7" pos:end="7:17">my_variable</name> <init pos:start="7:19" pos:end="7:24">= <expr pos:start="7:21" pos:end="7:24"><name pos:start="7:21" pos:end="7:24">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="8:1" pos:end="8:10"><decl pos:start="8:1" pos:end="8:9"><type pos:start="8:1" pos:end="8:4"><name pos:start="8:1" pos:end="8:4">char</name></type> <name pos:start="8:6" pos:end="8:9"><name pos:start="8:6" pos:end="8:6">A</name><index pos:start="8:7" pos:end="8:9">[<expr pos:start="8:8" pos:end="8:8"><literal type="number" pos:start="8:8" pos:end="8:8">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="9:1" pos:end="9:8"><decl pos:start="9:1" pos:end="9:7"><type pos:start="9:1" pos:end="9:3"><name pos:start="9:1" pos:end="9:3">int</name></type> <name pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:5">B</name><index pos:start="9:6" pos:end="9:7">[]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="10:1" pos:end="10:14"><decl pos:start="10:1" pos:end="10:13"><type pos:start="10:1" pos:end="10:5"><name pos:start="10:1" pos:end="10:5">float</name></type> <name pos:start="10:7" pos:end="10:13"><name pos:start="10:7" pos:end="10:7">C</name><index pos:start="10:8" pos:end="10:13">[<expr pos:start="10:9" pos:end="10:12"><name pos:start="10:9" pos:end="10:12">size</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="11:1" pos:end="11:15"><decl pos:start="11:1" pos:end="11:14"><type pos:start="11:1" pos:end="11:4"><name pos:start="11:1" pos:end="11:4">char</name></type> <name pos:start="11:6" pos:end="11:14">operation</name></decl>;</decl_stmt>
<decl_stmt pos:start="12:1" pos:end="12:13"><decl pos:start="12:1" pos:end="12:12"><type pos:start="12:1" pos:end="12:3"><name pos:start="12:1" pos:end="12:3">int</name></type> <name pos:start="12:5" pos:end="12:12">resultat</name></decl>;</decl_stmt>

<expr_stmt pos:start="14:1" pos:end="14:59"><expr pos:start="14:1" pos:end="14:58"><call pos:start="14:1" pos:end="14:58"><name pos:start="14:1" pos:end="14:6">fscanf</name><argument_list pos:start="14:7" pos:end="14:58">(<argument pos:start="14:8" pos:end="14:53"><expr pos:start="14:8" pos:end="14:53"><literal type="string" pos:start="14:8" pos:end="14:53">"Le rÃ©sultat de lÂ´opÃ©ration est : %d"</literal></expr></argument>,<argument pos:start="14:55" pos:end="14:57"><expr pos:start="14:55" pos:end="14:57"><name pos:start="14:55" pos:end="14:57">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" pos:start="16:1" pos:end="16:54">/* Recherche dÂ´un opÃ©rateur et de sa position */</comment>
<for pos:start="17:1" pos:end="21:1">for<control pos:start="17:4" pos:end="19:12">( <init pos:start="17:6" pos:end="17:10"><expr pos:start="17:6" pos:end="17:8"><name pos:start="17:6" pos:end="17:6">i</name><operator pos:start="17:7" pos:end="17:7">=</operator><literal type="number" pos:start="17:8" pos:end="17:8">0</literal></expr> ;</init> <condition pos:start="17:12" pos:end="19:7"><expr pos:start="17:12" pos:end="19:6"><operator pos:start="17:12" pos:end="17:12">*</operator><operator pos:start="17:13" pos:end="17:13">(</operator><name pos:start="17:14" pos:end="17:15">ch</name><operator pos:start="17:16" pos:end="17:16">+</operator><name pos:start="17:17" pos:end="17:17">i</name><operator pos:start="17:18" pos:end="17:18">)</operator> <operator pos:start="17:20" pos:end="17:21">!=</operator><literal type="char" pos:start="17:22" pos:end="17:24">'+'</literal> <operator pos:start="17:26" pos:end="17:27">&amp;&amp;</operator> <operator pos:start="17:29" pos:end="17:29">*</operator><operator pos:start="17:30" pos:end="17:30">(</operator><name pos:start="17:31" pos:end="17:32">ch</name><operator pos:start="17:33" pos:end="17:33">+</operator><name pos:start="17:34" pos:end="17:34">i</name><operator pos:start="17:35" pos:end="17:35">)</operator> <operator pos:start="17:37" pos:end="17:38">!=</operator><literal type="char" pos:start="17:39" pos:end="17:41">'-'</literal> <operator pos:start="17:43" pos:end="17:44">&amp;&amp;</operator> <operator pos:start="17:46" pos:end="17:46">*</operator><operator pos:start="17:47" pos:end="17:47">(</operator><name pos:start="17:48" pos:end="17:49">ch</name><operator pos:start="17:50" pos:end="17:50">+</operator><name pos:start="17:51" pos:end="17:51">i</name><operator pos:start="17:52" pos:end="17:52">)</operator> <operator pos:start="17:54" pos:end="17:55">!=</operator><literal type="char" pos:start="17:56" pos:end="17:58">'*'</literal> <operator pos:start="17:60" pos:end="17:61">&amp;&amp;</operator>
<operator pos:start="18:1" pos:end="18:1">*</operator><operator pos:start="18:2" pos:end="18:2">(</operator><name pos:start="18:3" pos:end="18:4">ch</name><operator pos:start="18:5" pos:end="18:5">+</operator><name pos:start="18:6" pos:end="18:6">i</name><operator pos:start="18:7" pos:end="18:7">)</operator> <operator pos:start="18:9" pos:end="18:10">!=</operator><literal type="char" pos:start="18:11" pos:end="18:13">'/'</literal> <operator pos:start="18:15" pos:end="18:16">&amp;&amp;</operator> <operator pos:start="18:18" pos:end="18:18">*</operator><operator pos:start="18:19" pos:end="18:19">(</operator><name pos:start="18:20" pos:end="18:21">ch</name><operator pos:start="18:22" pos:end="18:22">+</operator><name pos:start="18:23" pos:end="18:23">i</name><operator pos:start="18:24" pos:end="18:24">)</operator>
<operator pos:start="19:1" pos:end="19:2">!=</operator><literal type="char" pos:start="19:3" pos:end="19:6">'\0'</literal></expr>;</condition> <incr pos:start="19:9" pos:end="19:11"><expr pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:9">i</name><operator pos:start="19:10" pos:end="19:11">++</operator></expr></incr>)</control>
<block pos:start="20:1" pos:end="21:1">{<block_content>
</block_content>}</block></for>
<comment type="block" pos:start="22:1" pos:end="22:28">/* Traitement des erreurs */</comment>
<if_stmt pos:start="23:1" pos:end="58:1"><if pos:start="23:1" pos:end="27:1">if<condition pos:start="23:3" pos:end="23:8">(<expr pos:start="23:4" pos:end="23:7"><name pos:start="23:4" pos:end="23:4">i</name><operator pos:start="23:5" pos:end="23:6">==</operator><literal type="number" pos:start="23:7" pos:end="23:7">0</literal></expr>)</condition> <comment type="block" pos:start="23:10" pos:end="23:44">/* Le premier opÃ¨rande manque */</comment>
<block pos:start="24:1" pos:end="27:1">{<block_content pos:start="25:1" pos:end="26:8">
<expr_stmt pos:start="25:1" pos:end="25:36"><expr pos:start="25:1" pos:end="25:35"><call pos:start="25:1" pos:end="25:35"><name pos:start="25:1" pos:end="25:6">printf</name><argument_list pos:start="25:7" pos:end="25:35">(<argument pos:start="25:8" pos:end="25:34"><expr pos:start="25:8" pos:end="25:34"><literal type="string" pos:start="25:8" pos:end="25:34">"erreur : pas de &lt;valeur1&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="26:1" pos:end="26:8"><expr pos:start="26:1" pos:end="26:7"><call pos:start="26:1" pos:end="26:7"><name pos:start="26:1" pos:end="26:4">exit</name><argument_list pos:start="26:5" pos:end="26:7">(<argument pos:start="26:6" pos:end="26:6"><expr pos:start="26:6" pos:end="26:6"><literal type="number" pos:start="26:6" pos:end="26:6">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif" pos:start="28:1" pos:end="32:1">else if<condition pos:start="28:8" pos:end="28:24">(<expr pos:start="28:9" pos:end="28:23"><name pos:start="28:9" pos:end="28:9">i</name><operator pos:start="28:10" pos:end="28:11">==</operator><call pos:start="28:12" pos:end="28:21"><name pos:start="28:12" pos:end="28:17">strlen</name><argument_list pos:start="28:18" pos:end="28:21">(<argument pos:start="28:19" pos:end="28:20"><expr pos:start="28:19" pos:end="28:20"><name pos:start="28:19" pos:end="28:20">ch</name></expr></argument>)</argument_list></call><operator pos:start="28:22" pos:end="28:22">-</operator><literal type="number" pos:start="28:23" pos:end="28:23">1</literal></expr>)</condition> <comment type="block" pos:start="28:26" pos:end="28:64">/* Le deuxiÃ¨me opÃ©rande manque */</comment>
<block pos:start="29:1" pos:end="32:1">{<block_content pos:start="30:1" pos:end="31:8">
<expr_stmt pos:start="30:1" pos:end="30:36"><expr pos:start="30:1" pos:end="30:35"><call pos:start="30:1" pos:end="30:35"><name pos:start="30:1" pos:end="30:6">printf</name><argument_list pos:start="30:7" pos:end="30:35">(<argument pos:start="30:8" pos:end="30:34"><expr pos:start="30:8" pos:end="30:34"><literal type="string" pos:start="30:8" pos:end="30:34">"erreur : pas de &lt;valeur2&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="31:1" pos:end="31:8"><expr pos:start="31:1" pos:end="31:7"><call pos:start="31:1" pos:end="31:7"><name pos:start="31:1" pos:end="31:4">exit</name><argument_list pos:start="31:5" pos:end="31:7">(<argument pos:start="31:6" pos:end="31:6"><expr pos:start="31:6" pos:end="31:6"><literal type="number" pos:start="31:6" pos:end="31:6">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif" pos:start="33:1" pos:end="58:1">else if<condition pos:start="33:8" pos:end="33:22">(<expr pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:9">i</name><operator pos:start="33:10" pos:end="33:11">==</operator><call pos:start="33:12" pos:end="33:21"><name pos:start="33:12" pos:end="33:17">strlen</name><argument_list pos:start="33:18" pos:end="33:21">(<argument pos:start="33:19" pos:end="33:20"><expr pos:start="33:19" pos:end="33:20"><name pos:start="33:19" pos:end="33:20">ch</name></expr></argument>)</argument_list></call></expr>)</condition> <comment type="block" pos:start="33:24" pos:end="33:62">/* Il nÂ´a a pad dÂ´opÃ©rateur */</comment>
<block pos:start="34:1" pos:end="58:1">{<block_content pos:start="35:1" pos:end="57:8">
<expr_stmt pos:start="35:1" pos:end="35:37"><expr pos:start="35:1" pos:end="35:36"><call pos:start="35:1" pos:end="35:36"><name pos:start="35:1" pos:end="35:6">printf</name><argument_list pos:start="35:7" pos:end="35:36">(<argument pos:start="35:8" pos:end="35:35"><expr pos:start="35:8" pos:end="35:35"><literal type="string" pos:start="35:8" pos:end="35:35">"erreur : pas de &lt;operator&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="36:1" pos:end="36:40"><expr pos:start="36:1" pos:end="36:39"><name pos:start="36:1" pos:end="36:4">val1</name><operator pos:start="36:5" pos:end="36:5">=</operator><operator pos:start="36:6" pos:end="36:6">(</operator><name pos:start="36:7" pos:end="36:10">char</name><operator pos:start="36:11" pos:end="36:11">*</operator><operator pos:start="36:12" pos:end="36:12">)</operator> <call pos:start="36:14" pos:end="36:39"><name pos:start="36:14" pos:end="36:19">malloc</name><argument_list pos:start="36:20" pos:end="36:39">(<argument pos:start="36:21" pos:end="36:38"><expr pos:start="36:21" pos:end="36:38"><operator pos:start="36:21" pos:end="36:21">(</operator><name pos:start="36:22" pos:end="36:22">i</name><operator pos:start="36:23" pos:end="36:23">+</operator><literal type="number" pos:start="36:24" pos:end="36:24">1</literal><operator pos:start="36:25" pos:end="36:25">)</operator><operator pos:start="36:26" pos:end="36:26">*</operator><sizeof pos:start="36:27" pos:end="36:38">sizeof<argument_list pos:start="36:33" pos:end="36:38">(<argument pos:start="36:34" pos:end="36:37"><expr pos:start="36:34" pos:end="36:37"><name pos:start="36:34" pos:end="36:37">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="37:1" pos:end="37:42"><expr pos:start="37:1" pos:end="37:41"><name pos:start="37:1" pos:end="37:4">val1</name><operator pos:start="37:5" pos:end="37:5">=</operator><operator pos:start="37:6" pos:end="37:6">(</operator><name pos:start="37:7" pos:end="37:10">char</name><operator pos:start="37:11" pos:end="37:11">*</operator><operator pos:start="37:12" pos:end="37:12">)</operator> <call pos:start="37:14" pos:end="37:41"><name pos:start="37:14" pos:end="37:21">mymalloc</name><argument_list pos:start="37:22" pos:end="37:41">(<argument pos:start="37:23" pos:end="37:40"><expr pos:start="37:23" pos:end="37:40"><operator pos:start="37:23" pos:end="37:23">(</operator><name pos:start="37:24" pos:end="37:24">i</name><operator pos:start="37:25" pos:end="37:25">+</operator><literal type="number" pos:start="37:26" pos:end="37:26">1</literal><operator pos:start="37:27" pos:end="37:27">)</operator><operator pos:start="37:28" pos:end="37:28">*</operator><sizeof pos:start="37:29" pos:end="37:40">sizeof<argument_list pos:start="37:35" pos:end="37:40">(<argument pos:start="37:36" pos:end="37:39"><expr pos:start="37:36" pos:end="37:39"><name pos:start="37:36" pos:end="37:39">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="38:1" pos:end="38:41"><expr pos:start="38:1" pos:end="38:40"><name pos:start="38:1" pos:end="38:4">val1</name><operator pos:start="38:5" pos:end="38:5">=</operator><operator pos:start="38:6" pos:end="38:6">(</operator><name pos:start="38:7" pos:end="38:10">char</name><operator pos:start="38:11" pos:end="38:11">*</operator><operator pos:start="38:12" pos:end="38:12">)</operator> <call pos:start="38:14" pos:end="38:40"><name pos:start="38:14" pos:end="38:20">Kmalloc</name><argument_list pos:start="38:21" pos:end="38:40">(<argument pos:start="38:22" pos:end="38:39"><expr pos:start="38:22" pos:end="38:39"><operator pos:start="38:22" pos:end="38:22">(</operator><name pos:start="38:23" pos:end="38:23">i</name><operator pos:start="38:24" pos:end="38:24">+</operator><literal type="number" pos:start="38:25" pos:end="38:25">1</literal><operator pos:start="38:26" pos:end="38:26">)</operator><operator pos:start="38:27" pos:end="38:27">*</operator><sizeof pos:start="38:28" pos:end="38:39">sizeof<argument_list pos:start="38:34" pos:end="38:39">(<argument pos:start="38:35" pos:end="38:38"><expr pos:start="38:35" pos:end="38:38"><name pos:start="38:35" pos:end="38:38">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="39:1" pos:end="39:42"><expr pos:start="39:1" pos:end="39:41"><name pos:start="39:1" pos:end="39:4">val1</name><operator pos:start="39:5" pos:end="39:5">=</operator><operator pos:start="39:6" pos:end="39:6">(</operator><name pos:start="39:7" pos:end="39:10">char</name><operator pos:start="39:11" pos:end="39:11">*</operator><operator pos:start="39:12" pos:end="39:12">)</operator> <call pos:start="39:14" pos:end="39:41"><name pos:start="39:14" pos:end="39:21">KVmalloc</name><argument_list pos:start="39:22" pos:end="39:41">(<argument pos:start="39:23" pos:end="39:40"><expr pos:start="39:23" pos:end="39:40"><operator pos:start="39:23" pos:end="39:23">(</operator><name pos:start="39:24" pos:end="39:24">i</name><operator pos:start="39:25" pos:end="39:25">+</operator><literal type="number" pos:start="39:26" pos:end="39:26">1</literal><operator pos:start="39:27" pos:end="39:27">)</operator><operator pos:start="39:28" pos:end="39:28">*</operator><sizeof pos:start="39:29" pos:end="39:40">sizeof<argument_list pos:start="39:35" pos:end="39:40">(<argument pos:start="39:36" pos:end="39:39"><expr pos:start="39:36" pos:end="39:39"><name pos:start="39:36" pos:end="39:39">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="40:1" pos:end="40:50"><expr pos:start="40:1" pos:end="40:49"><name pos:start="40:1" pos:end="40:4">val1</name><operator pos:start="40:5" pos:end="40:5">=</operator><operator pos:start="40:6" pos:end="40:6">(</operator><name pos:start="40:7" pos:end="40:10">char</name><operator pos:start="40:11" pos:end="40:11">*</operator><operator pos:start="40:12" pos:end="40:12">)</operator> <call pos:start="40:14" pos:end="40:49"><name pos:start="40:14" pos:end="40:29">malloc_SOMETHING</name><argument_list pos:start="40:30" pos:end="40:49">(<argument pos:start="40:31" pos:end="40:48"><expr pos:start="40:31" pos:end="40:48"><operator pos:start="40:31" pos:end="40:31">(</operator><name pos:start="40:32" pos:end="40:32">i</name><operator pos:start="40:33" pos:end="40:33">+</operator><literal type="number" pos:start="40:34" pos:end="40:34">1</literal><operator pos:start="40:35" pos:end="40:35">)</operator><operator pos:start="40:36" pos:end="40:36">*</operator><sizeof pos:start="40:37" pos:end="40:48">sizeof<argument_list pos:start="40:43" pos:end="40:48">(<argument pos:start="40:44" pos:end="40:47"><expr pos:start="40:44" pos:end="40:47"><name pos:start="40:44" pos:end="40:47">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt pos:start="43:1" pos:end="43:40"><expr pos:start="43:1" pos:end="43:39"><name pos:start="43:1" pos:end="43:4">val1</name><operator pos:start="43:5" pos:end="43:5">=</operator><operator pos:start="43:6" pos:end="43:6">(</operator><name pos:start="43:7" pos:end="43:10">char</name><operator pos:start="43:11" pos:end="43:11">*</operator><operator pos:start="43:12" pos:end="43:12">)</operator> <call pos:start="43:14" pos:end="43:39"><name pos:start="43:14" pos:end="43:19">Calloc</name><argument_list pos:start="43:20" pos:end="43:39">(<argument pos:start="43:21" pos:end="43:38"><expr pos:start="43:21" pos:end="43:38"><operator pos:start="43:21" pos:end="43:21">(</operator><name pos:start="43:22" pos:end="43:22">i</name><operator pos:start="43:23" pos:end="43:23">+</operator><literal type="number" pos:start="43:24" pos:end="43:24">1</literal><operator pos:start="43:25" pos:end="43:25">)</operator><operator pos:start="43:26" pos:end="43:26">*</operator><sizeof pos:start="43:27" pos:end="43:38">sizeof<argument_list pos:start="43:33" pos:end="43:38">(<argument pos:start="43:34" pos:end="43:37"><expr pos:start="43:34" pos:end="43:37"><name pos:start="43:34" pos:end="43:37">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="44:1" pos:end="44:40"><expr pos:start="44:1" pos:end="44:39"><name pos:start="44:1" pos:end="44:4">val1</name><operator pos:start="44:5" pos:end="44:5">=</operator><operator pos:start="44:6" pos:end="44:6">(</operator><name pos:start="44:7" pos:end="44:10">char</name><operator pos:start="44:11" pos:end="44:11">*</operator><operator pos:start="44:12" pos:end="44:12">)</operator> <call pos:start="44:14" pos:end="44:39"><name pos:start="44:14" pos:end="44:19">calloc</name><argument_list pos:start="44:20" pos:end="44:39">(<argument pos:start="44:21" pos:end="44:38"><expr pos:start="44:21" pos:end="44:38"><operator pos:start="44:21" pos:end="44:21">(</operator><name pos:start="44:22" pos:end="44:22">i</name><operator pos:start="44:23" pos:end="44:23">+</operator><literal type="number" pos:start="44:24" pos:end="44:24">1</literal><operator pos:start="44:25" pos:end="44:25">)</operator><operator pos:start="44:26" pos:end="44:26">*</operator><sizeof pos:start="44:27" pos:end="44:38">sizeof<argument_list pos:start="44:33" pos:end="44:38">(<argument pos:start="44:34" pos:end="44:37"><expr pos:start="44:34" pos:end="44:37"><name pos:start="44:34" pos:end="44:37">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="45:1" pos:end="45:43"><expr pos:start="45:1" pos:end="45:42"><name pos:start="45:1" pos:end="45:4">val1</name><operator pos:start="45:5" pos:end="45:5">=</operator><operator pos:start="45:6" pos:end="45:6">(</operator><name pos:start="45:7" pos:end="45:10">char</name><operator pos:start="45:11" pos:end="45:11">*</operator><operator pos:start="45:12" pos:end="45:12">)</operator> <call pos:start="45:14" pos:end="45:42"><name pos:start="45:14" pos:end="45:22">MY_calloc</name><argument_list pos:start="45:23" pos:end="45:42">(<argument pos:start="45:24" pos:end="45:41"><expr pos:start="45:24" pos:end="45:41"><operator pos:start="45:24" pos:end="45:24">(</operator><name pos:start="45:25" pos:end="45:25">i</name><operator pos:start="45:26" pos:end="45:26">+</operator><literal type="number" pos:start="45:27" pos:end="45:27">1</literal><operator pos:start="45:28" pos:end="45:28">)</operator><operator pos:start="45:29" pos:end="45:29">*</operator><sizeof pos:start="45:30" pos:end="45:41">sizeof<argument_list pos:start="45:36" pos:end="45:41">(<argument pos:start="45:37" pos:end="45:40"><expr pos:start="45:37" pos:end="45:40"><name pos:start="45:37" pos:end="45:40">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="46:1" pos:end="46:50"><expr pos:start="46:1" pos:end="46:49"><name pos:start="46:1" pos:end="46:4">val1</name><operator pos:start="46:5" pos:end="46:5">=</operator><operator pos:start="46:6" pos:end="46:6">(</operator><name pos:start="46:7" pos:end="46:10">char</name><operator pos:start="46:11" pos:end="46:11">*</operator><operator pos:start="46:12" pos:end="46:12">)</operator> <call pos:start="46:14" pos:end="46:49"><name pos:start="46:14" pos:end="46:29">calloc_SOMETHING</name><argument_list pos:start="46:30" pos:end="46:49">(<argument pos:start="46:31" pos:end="46:48"><expr pos:start="46:31" pos:end="46:48"><operator pos:start="46:31" pos:end="46:31">(</operator><name pos:start="46:32" pos:end="46:32">i</name><operator pos:start="46:33" pos:end="46:33">+</operator><literal type="number" pos:start="46:34" pos:end="46:34">1</literal><operator pos:start="46:35" pos:end="46:35">)</operator><operator pos:start="46:36" pos:end="46:36">*</operator><sizeof pos:start="46:37" pos:end="46:48">sizeof<argument_list pos:start="46:43" pos:end="46:48">(<argument pos:start="46:44" pos:end="46:47"><expr pos:start="46:44" pos:end="46:47"><name pos:start="46:44" pos:end="46:47">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt pos:start="48:1" pos:end="48:41"><expr pos:start="48:1" pos:end="48:40"><name pos:start="48:1" pos:end="48:4">val1</name><operator pos:start="48:5" pos:end="48:5">=</operator><operator pos:start="48:6" pos:end="48:6">(</operator><name pos:start="48:7" pos:end="48:10">char</name><operator pos:start="48:11" pos:end="48:11">*</operator><operator pos:start="48:12" pos:end="48:12">)</operator> <call pos:start="48:14" pos:end="48:40"><name pos:start="48:14" pos:end="48:20">REalloc</name><argument_list pos:start="48:21" pos:end="48:40">(<argument pos:start="48:22" pos:end="48:39"><expr pos:start="48:22" pos:end="48:39"><operator pos:start="48:22" pos:end="48:22">(</operator><name pos:start="48:23" pos:end="48:23">i</name><operator pos:start="48:24" pos:end="48:24">+</operator><literal type="number" pos:start="48:25" pos:end="48:25">1</literal><operator pos:start="48:26" pos:end="48:26">)</operator><operator pos:start="48:27" pos:end="48:27">*</operator><sizeof pos:start="48:28" pos:end="48:39">sizeof<argument_list pos:start="48:34" pos:end="48:39">(<argument pos:start="48:35" pos:end="48:38"><expr pos:start="48:35" pos:end="48:38"><name pos:start="48:35" pos:end="48:38">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="49:1" pos:end="49:41"><expr pos:start="49:1" pos:end="49:40"><name pos:start="49:1" pos:end="49:4">val1</name><operator pos:start="49:5" pos:end="49:5">=</operator><operator pos:start="49:6" pos:end="49:6">(</operator><name pos:start="49:7" pos:end="49:10">char</name><operator pos:start="49:11" pos:end="49:11">*</operator><operator pos:start="49:12" pos:end="49:12">)</operator> <call pos:start="49:14" pos:end="49:40"><name pos:start="49:14" pos:end="49:20">realloc</name><argument_list pos:start="49:21" pos:end="49:40">(<argument pos:start="49:22" pos:end="49:39"><expr pos:start="49:22" pos:end="49:39"><operator pos:start="49:22" pos:end="49:22">(</operator><name pos:start="49:23" pos:end="49:23">i</name><operator pos:start="49:24" pos:end="49:24">+</operator><literal type="number" pos:start="49:25" pos:end="49:25">1</literal><operator pos:start="49:26" pos:end="49:26">)</operator><operator pos:start="49:27" pos:end="49:27">*</operator><sizeof pos:start="49:28" pos:end="49:39">sizeof<argument_list pos:start="49:34" pos:end="49:39">(<argument pos:start="49:35" pos:end="49:38"><expr pos:start="49:35" pos:end="49:38"><name pos:start="49:35" pos:end="49:38">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="50:1" pos:end="50:44"><expr pos:start="50:1" pos:end="50:43"><name pos:start="50:1" pos:end="50:4">val1</name><operator pos:start="50:5" pos:end="50:5">=</operator><operator pos:start="50:6" pos:end="50:6">(</operator><name pos:start="50:7" pos:end="50:10">char</name><operator pos:start="50:11" pos:end="50:11">*</operator><operator pos:start="50:12" pos:end="50:12">)</operator> <call pos:start="50:14" pos:end="50:43"><name pos:start="50:14" pos:end="50:23">MY_realloc</name><argument_list pos:start="50:24" pos:end="50:43">(<argument pos:start="50:25" pos:end="50:42"><expr pos:start="50:25" pos:end="50:42"><operator pos:start="50:25" pos:end="50:25">(</operator><name pos:start="50:26" pos:end="50:26">i</name><operator pos:start="50:27" pos:end="50:27">+</operator><literal type="number" pos:start="50:28" pos:end="50:28">1</literal><operator pos:start="50:29" pos:end="50:29">)</operator><operator pos:start="50:30" pos:end="50:30">*</operator><sizeof pos:start="50:31" pos:end="50:42">sizeof<argument_list pos:start="50:37" pos:end="50:42">(<argument pos:start="50:38" pos:end="50:41"><expr pos:start="50:38" pos:end="50:41"><name pos:start="50:38" pos:end="50:41">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="51:1" pos:end="51:51"><expr pos:start="51:1" pos:end="51:50"><name pos:start="51:1" pos:end="51:4">val1</name><operator pos:start="51:5" pos:end="51:5">=</operator><operator pos:start="51:6" pos:end="51:6">(</operator><name pos:start="51:7" pos:end="51:10">char</name><operator pos:start="51:11" pos:end="51:11">*</operator><operator pos:start="51:12" pos:end="51:12">)</operator> <call pos:start="51:14" pos:end="51:50"><name pos:start="51:14" pos:end="51:30">realloc_SOMETHING</name><argument_list pos:start="51:31" pos:end="51:50">(<argument pos:start="51:32" pos:end="51:49"><expr pos:start="51:32" pos:end="51:49"><operator pos:start="51:32" pos:end="51:32">(</operator><name pos:start="51:33" pos:end="51:33">i</name><operator pos:start="51:34" pos:end="51:34">+</operator><literal type="number" pos:start="51:35" pos:end="51:35">1</literal><operator pos:start="51:36" pos:end="51:36">)</operator><operator pos:start="51:37" pos:end="51:37">*</operator><sizeof pos:start="51:38" pos:end="51:49">sizeof<argument_list pos:start="51:44" pos:end="51:49">(<argument pos:start="51:45" pos:end="51:48"><expr pos:start="51:45" pos:end="51:48"><name pos:start="51:45" pos:end="51:48">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt pos:start="53:1" pos:end="53:11"><expr pos:start="53:1" pos:end="53:10"><call pos:start="53:1" pos:end="53:10"><name pos:start="53:1" pos:end="53:4">free</name><argument_list pos:start="53:5" pos:end="53:10">(<argument pos:start="53:6" pos:end="53:9"><expr pos:start="53:6" pos:end="53:9"><name pos:start="53:6" pos:end="53:9">val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt pos:start="55:1" pos:end="55:11"><expr pos:start="55:1" pos:end="55:10"><call pos:start="55:1" pos:end="55:10"><name pos:start="55:1" pos:end="55:4">FREE</name><argument_list pos:start="55:5" pos:end="55:10">(<argument pos:start="55:6" pos:end="55:9"><expr pos:start="55:6" pos:end="55:9"><name pos:start="55:6" pos:end="55:9">val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="56:1" pos:end="56:16"><expr pos:start="56:1" pos:end="56:15"><call pos:start="56:1" pos:end="56:15"><name pos:start="56:1" pos:end="56:9">YOUR_free</name><argument_list pos:start="56:10" pos:end="56:15">(<argument pos:start="56:11" pos:end="56:14"><expr pos:start="56:11" pos:end="56:14"><name pos:start="56:11" pos:end="56:14">val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="57:1" pos:end="57:8"><expr pos:start="57:1" pos:end="57:7"><call pos:start="57:1" pos:end="57:7"><name pos:start="57:1" pos:end="57:4">exit</name><argument_list pos:start="57:5" pos:end="57:7">(<argument pos:start="57:6" pos:end="57:6"><expr pos:start="57:6" pos:end="57:6"><literal type="number" pos:start="57:6" pos:end="57:6">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<comment type="block" pos:start="59:1" pos:end="60:22">/* char Extraction de la chaÃ®ne de caractÃ¨re correspondant au
premier opÃ©rande */</comment>
<expr_stmt pos:start="61:1" pos:end="61:40"><expr pos:start="61:1" pos:end="61:39"><name pos:start="61:1" pos:end="61:4">val1</name><operator pos:start="61:5" pos:end="61:5">=</operator><operator pos:start="61:6" pos:end="61:6">(</operator><name pos:start="61:7" pos:end="61:10">char</name><operator pos:start="61:11" pos:end="61:11">*</operator><operator pos:start="61:12" pos:end="61:12">)</operator> <call pos:start="61:14" pos:end="61:39"><name pos:start="61:14" pos:end="61:19">malloc</name><argument_list pos:start="61:20" pos:end="61:39">(<argument pos:start="61:21" pos:end="61:38"><expr pos:start="61:21" pos:end="61:38"><operator pos:start="61:21" pos:end="61:21">(</operator><name pos:start="61:22" pos:end="61:22">i</name><operator pos:start="61:23" pos:end="61:23">+</operator><literal type="number" pos:start="61:24" pos:end="61:24">1</literal><operator pos:start="61:25" pos:end="61:25">)</operator><operator pos:start="61:26" pos:end="61:26">*</operator><sizeof pos:start="61:27" pos:end="61:38">sizeof<argument_list pos:start="61:33" pos:end="61:38">(<argument pos:start="61:34" pos:end="61:37"><expr pos:start="61:34" pos:end="61:37"><name pos:start="61:34" pos:end="61:37">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="62:1" pos:end="62:21"><expr pos:start="62:1" pos:end="62:20"><call pos:start="62:1" pos:end="62:20"><name pos:start="62:1" pos:end="62:7">extract</name><argument_list pos:start="62:8" pos:end="62:20">(<argument pos:start="62:9" pos:end="62:10"><expr pos:start="62:9" pos:end="62:10"><name pos:start="62:9" pos:end="62:10">ch</name></expr></argument>,<argument pos:start="62:12" pos:end="62:15"><expr pos:start="62:12" pos:end="62:15"><name pos:start="62:12" pos:end="62:15">val1</name></expr></argument>,<argument pos:start="62:17" pos:end="62:17"><expr pos:start="62:17" pos:end="62:17"><literal type="number" pos:start="62:17" pos:end="62:17">0</literal></expr></argument>,<argument pos:start="62:19" pos:end="62:19"><expr pos:start="62:19" pos:end="62:19"><name pos:start="62:19" pos:end="62:19">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block" pos:start="63:1" pos:end="63:61">/* Transformation de la chaÃ®ne de carctÃ¨re en entier */</comment>
<expr_stmt pos:start="64:1" pos:end="64:28"><expr pos:start="64:1" pos:end="64:27"><call pos:start="64:1" pos:end="64:27"><name pos:start="64:1" pos:end="64:6">sscanf</name><argument_list pos:start="64:7" pos:end="64:27">(<argument pos:start="64:8" pos:end="64:11"><expr pos:start="64:8" pos:end="64:11"><name pos:start="64:8" pos:end="64:11">val1</name></expr></argument>,<argument pos:start="64:13" pos:end="64:16"><expr pos:start="64:13" pos:end="64:16"><literal type="string" pos:start="64:13" pos:end="64:16">"%d"</literal></expr></argument>,<argument pos:start="64:18" pos:end="64:26"><expr pos:start="64:18" pos:end="64:26"><operator pos:start="64:18" pos:end="64:18">&amp;</operator> <name pos:start="64:20" pos:end="64:26">valeur1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block" pos:start="65:1" pos:end="65:42">/* RÃ©cuperation de lÂ´opÃ©rateur */</comment>
<expr_stmt pos:start="66:1" pos:end="66:18"><expr pos:start="66:1" pos:end="66:17"><name pos:start="66:1" pos:end="66:9">operation</name><operator pos:start="66:10" pos:end="66:10">=</operator><operator pos:start="66:11" pos:end="66:11">*</operator><operator pos:start="66:12" pos:end="66:12">(</operator><name pos:start="66:13" pos:end="66:14">ch</name><operator pos:start="66:15" pos:end="66:15">+</operator><name pos:start="66:16" pos:end="66:16">i</name><operator pos:start="66:17" pos:end="66:17">)</operator></expr>;</expr_stmt>
<comment type="block" pos:start="67:1" pos:end="68:26">/* Extraction de la chaÃ®ne de caractÃ¨re correspondant au
deuxiÃ¨me opÃ©rande */</comment>
<expr_stmt pos:start="69:1" pos:end="69:24"><expr pos:start="69:1" pos:end="69:23"><name pos:start="69:1" pos:end="69:6">lgval2</name><operator pos:start="69:7" pos:end="69:7">=</operator><call pos:start="69:8" pos:end="69:17"><name pos:start="69:8" pos:end="69:13">strlen</name><argument_list pos:start="69:14" pos:end="69:17">(<argument pos:start="69:15" pos:end="69:16"><expr pos:start="69:15" pos:end="69:16"><name pos:start="69:15" pos:end="69:16">ch</name></expr></argument>)</argument_list></call><operator pos:start="69:18" pos:end="69:18">-</operator><operator pos:start="69:19" pos:end="69:19">(</operator><name pos:start="69:20" pos:end="69:20">i</name><operator pos:start="69:21" pos:end="69:21">+</operator><literal type="number" pos:start="69:22" pos:end="69:22">1</literal><operator pos:start="69:23" pos:end="69:23">)</operator></expr>;</expr_stmt>
<expr_stmt pos:start="70:1" pos:end="70:45"><expr pos:start="70:1" pos:end="70:44"><name pos:start="70:1" pos:end="70:4">val2</name><operator pos:start="70:5" pos:end="70:5">=</operator><operator pos:start="70:6" pos:end="70:6">(</operator><name pos:start="70:7" pos:end="70:10">char</name><operator pos:start="70:11" pos:end="70:11">*</operator><operator pos:start="70:12" pos:end="70:12">)</operator> <call pos:start="70:14" pos:end="70:44"><name pos:start="70:14" pos:end="70:19">malloc</name><argument_list pos:start="70:20" pos:end="70:44">(<argument pos:start="70:21" pos:end="70:43"><expr pos:start="70:21" pos:end="70:43"><operator pos:start="70:21" pos:end="70:21">(</operator><name pos:start="70:22" pos:end="70:27">lgval2</name><operator pos:start="70:28" pos:end="70:28">+</operator><literal type="number" pos:start="70:29" pos:end="70:29">1</literal><operator pos:start="70:30" pos:end="70:30">)</operator><operator pos:start="70:31" pos:end="70:31">*</operator><sizeof pos:start="70:32" pos:end="70:43">sizeof<argument_list pos:start="70:38" pos:end="70:43">(<argument pos:start="70:39" pos:end="70:42"><expr pos:start="70:39" pos:end="70:42"><name pos:start="70:39" pos:end="70:42">char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="71:1" pos:end="71:28"><expr pos:start="71:1" pos:end="71:27"><call pos:start="71:1" pos:end="71:27"><name pos:start="71:1" pos:end="71:7">extract</name><argument_list pos:start="71:8" pos:end="71:27">(<argument pos:start="71:9" pos:end="71:10"><expr pos:start="71:9" pos:end="71:10"><name pos:start="71:9" pos:end="71:10">ch</name></expr></argument>,<argument pos:start="71:12" pos:end="71:15"><expr pos:start="71:12" pos:end="71:15"><name pos:start="71:12" pos:end="71:15">val2</name></expr></argument>,<argument pos:start="71:17" pos:end="71:19"><expr pos:start="71:17" pos:end="71:19"><name pos:start="71:17" pos:end="71:17">i</name><operator pos:start="71:18" pos:end="71:18">+</operator><literal type="number" pos:start="71:19" pos:end="71:19">1</literal></expr></argument>,<argument pos:start="71:21" pos:end="71:26"><expr pos:start="71:21" pos:end="71:26"><name pos:start="71:21" pos:end="71:26">lgval2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block" pos:start="72:1" pos:end="72:62">/* Transformation de la chaÃ®ne de caractÃ¨re en entier */</comment>
<expr_stmt pos:start="73:1" pos:end="73:27"><expr pos:start="73:1" pos:end="73:26"><call pos:start="73:1" pos:end="73:26"><name pos:start="73:1" pos:end="73:6">sscanf</name><argument_list pos:start="73:7" pos:end="73:26">(<argument pos:start="73:8" pos:end="73:11"><expr pos:start="73:8" pos:end="73:11"><name pos:start="73:8" pos:end="73:11">val2</name></expr></argument>,<argument pos:start="73:13" pos:end="73:16"><expr pos:start="73:13" pos:end="73:16"><literal type="string" pos:start="73:13" pos:end="73:16">"%d"</literal></expr></argument>,<argument pos:start="73:18" pos:end="73:25"><expr pos:start="73:18" pos:end="73:25"><operator pos:start="73:18" pos:end="73:18">&amp;</operator><name pos:start="73:19" pos:end="73:25">valeur2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block" pos:start="74:1" pos:end="74:37">/* Traitement de lÂ´opÃ©ration */</comment>
<switch pos:start="75:1" pos:end="95:1">switch<condition pos:start="75:7" pos:end="75:17">(<expr pos:start="75:8" pos:end="75:16"><name pos:start="75:8" pos:end="75:16">operation</name></expr>)</condition>
<block pos:start="76:1" pos:end="95:1">{<block_content pos:start="77:1" pos:end="94:1">
<case pos:start="77:1" pos:end="77:9">case <expr pos:start="77:6" pos:end="77:8"><literal type="char" pos:start="77:6" pos:end="77:8">'+'</literal></expr>:</case>
<expr_stmt pos:start="78:1" pos:end="78:25"><expr pos:start="78:1" pos:end="78:24"><name pos:start="78:1" pos:end="78:8">resultat</name><operator pos:start="78:9" pos:end="78:9">=</operator><name pos:start="78:10" pos:end="78:16">valeur1</name><operator pos:start="78:17" pos:end="78:17">+</operator><name pos:start="78:18" pos:end="78:24">valeur2</name></expr>;</expr_stmt>
<break pos:start="79:1" pos:end="79:6">break;</break>
<case pos:start="80:1" pos:end="80:9">case <expr pos:start="80:6" pos:end="80:8"><literal type="char" pos:start="80:6" pos:end="80:8">'-'</literal></expr>:</case>
<expr_stmt pos:start="81:1" pos:end="81:25"><expr pos:start="81:1" pos:end="81:24"><name pos:start="81:1" pos:end="81:8">resultat</name><operator pos:start="81:9" pos:end="81:9">=</operator><name pos:start="81:10" pos:end="81:16">valeur1</name><operator pos:start="81:17" pos:end="81:17">-</operator><name pos:start="81:18" pos:end="81:24">valeur2</name></expr>;</expr_stmt>
<break pos:start="82:1" pos:end="82:6">break;</break>
<case pos:start="83:1" pos:end="83:9">case <expr pos:start="83:6" pos:end="83:8"><literal type="char" pos:start="83:6" pos:end="83:8">'*'</literal></expr>:</case>
<expr_stmt pos:start="84:1" pos:end="84:25"><expr pos:start="84:1" pos:end="84:24"><name pos:start="84:1" pos:end="84:8">resultat</name><operator pos:start="84:9" pos:end="84:9">=</operator><name pos:start="84:10" pos:end="84:16">valeur1</name><operator pos:start="84:17" pos:end="84:17">*</operator><name pos:start="84:18" pos:end="84:24">valeur2</name></expr>;</expr_stmt>
<break pos:start="85:1" pos:end="85:6">break;</break>
<case pos:start="86:1" pos:end="86:9">case <expr pos:start="86:6" pos:end="86:8"><literal type="char" pos:start="86:6" pos:end="86:8">'/'</literal></expr>:</case>
<if_stmt pos:start="87:1" pos:end="94:1"><if pos:start="87:1" pos:end="88:25">if<condition pos:start="87:3" pos:end="87:16">(<expr pos:start="87:4" pos:end="87:15"><name pos:start="87:4" pos:end="87:10">valeur2</name> <operator pos:start="87:12" pos:end="87:13">!=</operator> <literal type="number" pos:start="87:15" pos:end="87:15">0</literal></expr>)</condition><block type="pseudo" pos:start="88:1" pos:end="88:25"><block_content pos:start="88:1" pos:end="88:25">
<expr_stmt pos:start="88:1" pos:end="88:25"><expr pos:start="88:1" pos:end="88:24"><name pos:start="88:1" pos:end="88:8">resultat</name><operator pos:start="88:9" pos:end="88:9">=</operator><name pos:start="88:10" pos:end="88:16">valeur1</name><operator pos:start="88:17" pos:end="88:17">/</operator><name pos:start="88:18" pos:end="88:24">valeur2</name></expr>;</expr_stmt></block_content></block></if>
<else pos:start="89:1" pos:end="94:1">else
<block pos:start="90:1" pos:end="94:1">{<block_content pos:start="91:1" pos:end="93:8">
<expr_stmt pos:start="91:1" pos:end="91:11"><expr pos:start="91:1" pos:end="91:10"><name pos:start="91:1" pos:end="91:8">resultat</name><operator pos:start="91:9" pos:end="91:9">=</operator><literal type="number" pos:start="91:10" pos:end="91:10">0</literal></expr>;</expr_stmt>
<expr_stmt pos:start="92:1" pos:end="92:47"><expr pos:start="92:1" pos:end="92:46"><call pos:start="92:1" pos:end="92:46"><name pos:start="92:1" pos:end="92:6">printf</name><argument_list pos:start="92:7" pos:end="92:46">(<argument pos:start="92:8" pos:end="92:45"><expr pos:start="92:8" pos:end="92:45"><literal type="string" pos:start="92:8" pos:end="92:45">"Erreur : impossible de diviser par 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt pos:start="93:1" pos:end="93:8"><expr pos:start="93:1" pos:end="93:7"><call pos:start="93:1" pos:end="93:7"><name pos:start="93:1" pos:end="93:4">exit</name><argument_list pos:start="93:5" pos:end="93:7">(<argument pos:start="93:6" pos:end="93:6"><expr pos:start="93:6" pos:end="93:6"><literal type="number" pos:start="93:6" pos:end="93:6">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></switch>

<decl_stmt pos:start="97:1" pos:end="97:10"><decl pos:start="97:1" pos:end="97:9"><type pos:start="97:1" pos:end="97:7"><name pos:start="97:1" pos:end="97:5">float</name> <modifier pos:start="97:7" pos:end="97:7">*</modifier></type> <name pos:start="97:9" pos:end="97:9">p</name></decl>;</decl_stmt>

<expr_stmt pos:start="99:1" pos:end="99:14"><expr pos:start="99:1" pos:end="99:13"><operator pos:start="99:1" pos:end="99:1">(</operator><name pos:start="99:2" pos:end="99:4">int</name> <operator pos:start="99:6" pos:end="99:6">*</operator><operator pos:start="99:7" pos:end="99:7">)</operator> <name pos:start="99:9" pos:end="99:9">p</name> <operator pos:start="99:11" pos:end="99:11">=</operator> <literal type="number" pos:start="99:13" pos:end="99:13">5</literal></expr>;</expr_stmt>

<decl_stmt pos:start="101:1" pos:end="104:45"><decl pos:start="101:1" pos:end="104:44"><type pos:start="101:1" pos:end="101:3"><name pos:start="101:1" pos:end="101:3">int</name></type> <name pos:start="101:5" pos:end="101:10">result</name><init pos:start="101:11" pos:end="104:44">=<expr pos:start="101:12" pos:end="104:44"><call pos:start="101:12" pos:end="104:44"><name pos:start="101:12" pos:end="101:18">sumHash</name><argument_list pos:start="101:19" pos:end="104:44">(<argument pos:start="101:20" pos:end="101:39"><expr pos:start="101:20" pos:end="101:39"><operator pos:start="101:20" pos:end="101:20">(</operator><operator pos:start="101:21" pos:end="101:21">(</operator><name pos:start="101:22" pos:end="101:25">char</name> <operator pos:start="101:27" pos:end="101:27">*</operator><operator pos:start="101:28" pos:end="101:28">)</operator> <operator pos:start="101:30" pos:end="101:30">&amp;</operator><name pos:start="101:31" pos:end="101:35">myVar</name><operator pos:start="101:36" pos:end="101:36">)</operator><index pos:start="101:37" pos:end="101:39">[<expr pos:start="101:38" pos:end="101:38"><literal type="number" pos:start="101:38" pos:end="101:38">0</literal></expr>]</index></expr></argument>, 
                       <argument pos:start="102:24" pos:end="102:43"><expr pos:start="102:24" pos:end="102:43"><operator pos:start="102:24" pos:end="102:24">(</operator><operator pos:start="102:25" pos:end="102:25">(</operator><name pos:start="102:26" pos:end="102:29">char</name> <operator pos:start="102:31" pos:end="102:31">*</operator><operator pos:start="102:32" pos:end="102:32">)</operator> <operator pos:start="102:34" pos:end="102:34">&amp;</operator><name pos:start="102:35" pos:end="102:39">myVar</name><operator pos:start="102:40" pos:end="102:40">)</operator><index pos:start="102:41" pos:end="102:43">[<expr pos:start="102:42" pos:end="102:42"><literal type="number" pos:start="102:42" pos:end="102:42">1</literal></expr>]</index></expr></argument>,
                       <argument pos:start="103:24" pos:end="103:43"><expr pos:start="103:24" pos:end="103:43"><operator pos:start="103:24" pos:end="103:24">(</operator><operator pos:start="103:25" pos:end="103:25">(</operator><name pos:start="103:26" pos:end="103:29">char</name> <operator pos:start="103:31" pos:end="103:31">*</operator><operator pos:start="103:32" pos:end="103:32">)</operator> <operator pos:start="103:34" pos:end="103:34">&amp;</operator><name pos:start="103:35" pos:end="103:39">myVar</name><operator pos:start="103:40" pos:end="103:40">)</operator><index pos:start="103:41" pos:end="103:43">[<expr pos:start="103:42" pos:end="103:42"><literal type="number" pos:start="103:42" pos:end="103:42">2</literal></expr>]</index></expr></argument>,
                       <argument pos:start="104:24" pos:end="104:43"><expr pos:start="104:24" pos:end="104:43"><operator pos:start="104:24" pos:end="104:24">(</operator><operator pos:start="104:25" pos:end="104:25">(</operator><name pos:start="104:26" pos:end="104:29">char</name> <operator pos:start="104:31" pos:end="104:31">*</operator><operator pos:start="104:32" pos:end="104:32">)</operator> <operator pos:start="104:34" pos:end="104:34">&amp;</operator><name pos:start="104:35" pos:end="104:39">myVar</name><operator pos:start="104:40" pos:end="104:40">)</operator><index pos:start="104:41" pos:end="104:43">[<expr pos:start="104:42" pos:end="104:42"><literal type="number" pos:start="104:42" pos:end="104:42">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt pos:start="106:1" pos:end="110:1"><if pos:start="106:1" pos:end="110:1">if <condition pos:start="106:4" pos:end="106:17">(<expr pos:start="106:5" pos:end="106:16"><name pos:start="106:5" pos:end="106:8">val1</name> <operator pos:start="106:10" pos:end="106:11">!=</operator> <name pos:start="106:13" pos:end="106:16">null</name></expr>)</condition>
<block pos:start="107:1" pos:end="110:1">{<block_content pos:start="108:10" pos:end="108:18">
	 <return pos:start="108:10" pos:end="108:18">return <expr pos:start="108:17" pos:end="108:17"><literal type="number" pos:start="108:17" pos:end="108:17">2</literal></expr>;</return>
	
</block_content>}</block></if></if_stmt>

<if_stmt pos:start="112:1" pos:end="120:1"><if pos:start="112:1" pos:end="116:1">if <condition pos:start="112:4" pos:end="112:17">(<expr pos:start="112:5" pos:end="112:16"><name pos:start="112:5" pos:end="112:8">val2</name> <operator pos:start="112:10" pos:end="112:11">==</operator> <name pos:start="112:13" pos:end="112:16">val1</name></expr>)</condition>
<block pos:start="113:1" pos:end="116:1">{<block_content pos:start="114:10" pos:end="114:18">
	 <return pos:start="114:10" pos:end="114:18">return <expr pos:start="114:17" pos:end="114:17"><literal type="number" pos:start="114:17" pos:end="114:17">0</literal></expr>;</return>
	
</block_content>}</block></if>
<if type="elseif" pos:start="117:1" pos:end="120:1">else if<condition pos:start="117:8" pos:end="117:21">(<expr pos:start="117:9" pos:end="117:20"><name pos:start="117:9" pos:end="117:12">val1</name> <operator pos:start="117:14" pos:end="117:15">==</operator> <name pos:start="117:17" pos:end="117:20">null</name></expr>)</condition>
<block pos:start="118:1" pos:end="120:1">{<block_content pos:start="119:9" pos:end="119:18">
	<return pos:start="119:9" pos:end="119:18">return <expr pos:start="119:16" pos:end="119:17"><operator pos:start="119:16" pos:end="119:16">-</operator><literal type="number" pos:start="119:17" pos:end="119:17">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<decl_stmt pos:start="122:1" pos:end="122:27"><decl pos:start="122:1" pos:end="122:11"><type pos:start="122:1" pos:end="122:3"><name pos:start="122:1" pos:end="122:3">int</name></type> <name pos:start="122:5" pos:end="122:11"><name pos:start="122:5" pos:end="122:7">Tab</name><index pos:start="122:8" pos:end="122:11">[<expr pos:start="122:9" pos:end="122:10"><literal type="number" pos:start="122:9" pos:end="122:10">50</literal></expr>]</index></name></decl>, <decl pos:start="122:14" pos:end="122:18"><type ref="prev" pos:start="122:1" pos:end="122:3"/><name pos:start="122:14" pos:end="122:18">Index</name></decl>, <decl pos:start="122:21" pos:end="122:26"><type ref="prev" pos:start="122:1" pos:end="122:3"/><name pos:start="122:21" pos:end="122:26">Index2</name></decl>;</decl_stmt>
<expr_stmt pos:start="123:1" pos:end="123:11"><expr pos:start="123:1" pos:end="123:10"><name pos:start="123:1" pos:end="123:5">Index</name> <operator pos:start="123:7" pos:end="123:7">=</operator> <literal type="number" pos:start="123:9" pos:end="123:10">10</literal></expr>;</expr_stmt>
<expr_stmt pos:start="124:1" pos:end="124:12"><expr pos:start="124:1" pos:end="124:11"><name pos:start="124:1" pos:end="124:6">Index2</name> <operator pos:start="124:8" pos:end="124:8">=</operator> <literal type="number" pos:start="124:10" pos:end="124:11">20</literal></expr>;</expr_stmt>

<if_stmt pos:start="126:1" pos:end="127:16"><if pos:start="126:1" pos:end="127:16">if <condition pos:start="126:4" pos:end="126:13">(<expr pos:start="126:5" pos:end="126:12"><name pos:start="126:5" pos:end="126:9">Index</name><operator pos:start="126:10" pos:end="126:10">&lt;</operator><literal type="number" pos:start="126:11" pos:end="126:12">50</literal></expr>)</condition><block type="pseudo" pos:start="127:1" pos:end="127:16"><block_content pos:start="127:1" pos:end="127:16">
<expr_stmt pos:start="127:1" pos:end="127:16"><expr pos:start="127:1" pos:end="127:15"><name pos:start="127:1" pos:end="127:10"><name pos:start="127:1" pos:end="127:3">Tab</name><index pos:start="127:4" pos:end="127:10">[<expr pos:start="127:5" pos:end="127:9"><name pos:start="127:5" pos:end="127:9">Index</name></expr>]</index></name> <operator pos:start="127:12" pos:end="127:12">=</operator> <literal type="number" pos:start="127:14" pos:end="127:15">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt pos:start="129:1" pos:end="130:17"><if pos:start="129:1" pos:end="130:17">if <condition pos:start="129:4" pos:end="129:14">(<expr pos:start="129:5" pos:end="129:13"><name pos:start="129:5" pos:end="129:10">Index2</name><operator pos:start="129:11" pos:end="129:11">&lt;</operator><literal type="number" pos:start="129:12" pos:end="129:13">50</literal></expr>)</condition><block type="pseudo" pos:start="130:1" pos:end="130:17"><block_content pos:start="130:1" pos:end="130:17">
<expr_stmt pos:start="130:1" pos:end="130:17"><expr pos:start="130:1" pos:end="130:16"><name pos:start="130:1" pos:end="130:11"><name pos:start="130:1" pos:end="130:3">Tab</name><index pos:start="130:4" pos:end="130:11">[<expr pos:start="130:5" pos:end="130:10"><name pos:start="130:5" pos:end="130:10">Index2</name></expr>]</index></name> <operator pos:start="130:13" pos:end="130:13">=</operator> <literal type="number" pos:start="130:15" pos:end="130:16">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt pos:start="132:1" pos:end="133:20"><if pos:start="132:1" pos:end="133:20">if <condition pos:start="132:4" pos:end="132:16">(<expr pos:start="132:5" pos:end="132:15"><name pos:start="132:5" pos:end="132:9">Index</name><operator pos:start="132:10" pos:end="132:10">+</operator><literal type="number" pos:start="132:11" pos:end="132:11">5</literal> <operator pos:start="132:13" pos:end="132:13">&lt;</operator><literal type="number" pos:start="132:14" pos:end="132:15">50</literal></expr>)</condition><block type="pseudo" pos:start="133:1" pos:end="133:20"><block_content pos:start="133:1" pos:end="133:20">
<expr_stmt pos:start="133:1" pos:end="133:20"><expr pos:start="133:1" pos:end="133:19"><name pos:start="133:1" pos:end="133:14"><name pos:start="133:1" pos:end="133:3">Tab</name><index pos:start="133:4" pos:end="133:14">[<expr pos:start="133:5" pos:end="133:13"><name pos:start="133:5" pos:end="133:9">Index</name> <operator pos:start="133:11" pos:end="133:11">+</operator> <literal type="number" pos:start="133:13" pos:end="133:13">5</literal></expr>]</index></name> <operator pos:start="133:16" pos:end="133:16">=</operator> <literal type="number" pos:start="133:18" pos:end="133:19">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt pos:start="135:1" pos:end="136:20"><if pos:start="135:1" pos:end="136:20">if <condition pos:start="135:4" pos:end="135:19">(<expr pos:start="135:5" pos:end="135:18"><operator pos:start="135:5" pos:end="135:5">(</operator><name pos:start="135:6" pos:end="135:10">Index</name> <operator pos:start="135:12" pos:end="135:12">-</operator><literal type="number" pos:start="135:13" pos:end="135:13">2</literal><operator pos:start="135:14" pos:end="135:14">)</operator> <operator pos:start="135:16" pos:end="135:16">&lt;</operator><literal type="number" pos:start="135:17" pos:end="135:18">50</literal></expr>)</condition><block type="pseudo" pos:start="136:1" pos:end="136:20"><block_content pos:start="136:1" pos:end="136:20">
<expr_stmt pos:start="136:1" pos:end="136:20"><expr pos:start="136:1" pos:end="136:19"><name pos:start="136:1" pos:end="136:14"><name pos:start="136:1" pos:end="136:3">Tab</name><index pos:start="136:4" pos:end="136:14">[<expr pos:start="136:5" pos:end="136:13"><name pos:start="136:5" pos:end="136:9">Index</name> <operator pos:start="136:11" pos:end="136:11">+</operator> <literal type="number" pos:start="136:13" pos:end="136:13">5</literal></expr>]</index></name> <operator pos:start="136:16" pos:end="136:16">=</operator> <literal type="number" pos:start="136:18" pos:end="136:19">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt pos:start="138:1" pos:end="139:23"><if pos:start="138:1" pos:end="139:23">if <condition pos:start="138:4" pos:end="138:22">(<expr pos:start="138:5" pos:end="138:21"><name pos:start="138:5" pos:end="138:10">Index2</name> <operator pos:start="138:12" pos:end="138:12">+</operator> <name pos:start="138:14" pos:end="138:18">Index</name><operator pos:start="138:19" pos:end="138:19">&lt;</operator><literal type="number" pos:start="138:20" pos:end="138:21">50</literal></expr>)</condition><block type="pseudo" pos:start="139:1" pos:end="139:23"><block_content pos:start="139:1" pos:end="139:23">
<expr_stmt pos:start="139:1" pos:end="139:23"><expr pos:start="139:1" pos:end="139:22"><name pos:start="139:1" pos:end="139:17"><name pos:start="139:1" pos:end="139:3">Tab</name><index pos:start="139:4" pos:end="139:17">[<expr pos:start="139:5" pos:end="139:16"><name pos:start="139:5" pos:end="139:10">Index2</name><operator pos:start="139:11" pos:end="139:11">+</operator><name pos:start="139:12" pos:end="139:16">Index</name></expr>]</index></name> <operator pos:start="139:19" pos:end="139:19">=</operator> <literal type="number" pos:start="139:21" pos:end="139:22">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt pos:start="141:1" pos:end="142:23"><if pos:start="141:1" pos:end="142:23">if <condition pos:start="141:4" pos:end="141:24">(<expr pos:start="141:5" pos:end="141:23"><operator pos:start="141:5" pos:end="141:5">(</operator><name pos:start="141:6" pos:end="141:11">Index2</name> <operator pos:start="141:13" pos:end="141:13">+</operator> <name pos:start="141:15" pos:end="141:19">Index</name><operator pos:start="141:20" pos:end="141:20">)</operator><operator pos:start="141:21" pos:end="141:21">&lt;</operator><literal type="number" pos:start="141:22" pos:end="141:23">50</literal></expr>)</condition><block type="pseudo" pos:start="142:1" pos:end="142:23"><block_content pos:start="142:1" pos:end="142:23">
<expr_stmt pos:start="142:1" pos:end="142:23"><expr pos:start="142:1" pos:end="142:22"><name pos:start="142:1" pos:end="142:17"><name pos:start="142:1" pos:end="142:3">Tab</name><index pos:start="142:4" pos:end="142:17">[<expr pos:start="142:5" pos:end="142:16"><name pos:start="142:5" pos:end="142:10">Index2</name><operator pos:start="142:11" pos:end="142:11">+</operator><name pos:start="142:12" pos:end="142:16">Index</name></expr>]</index></name> <operator pos:start="142:19" pos:end="142:19">=</operator> <literal type="number" pos:start="142:21" pos:end="142:22">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt pos:start="144:1" pos:end="151:1"><if pos:start="144:1" pos:end="147:1">if <condition pos:start="144:4" pos:end="144:24">(<expr pos:start="144:5" pos:end="144:23"><operator pos:start="144:5" pos:end="144:5">(</operator><name pos:start="144:6" pos:end="144:11">Index2</name> <operator pos:start="144:13" pos:end="144:13">+</operator> <name pos:start="144:15" pos:end="144:19">Index</name><operator pos:start="144:20" pos:end="144:20">)</operator><operator pos:start="144:21" pos:end="144:21">&lt;</operator><literal type="number" pos:start="144:22" pos:end="144:23">50</literal></expr>)</condition>
<block pos:start="145:1" pos:end="147:1">{<block_content pos:start="146:1" pos:end="146:23">
<expr_stmt pos:start="146:1" pos:end="146:23"><expr pos:start="146:1" pos:end="146:22"><name pos:start="146:1" pos:end="146:17"><name pos:start="146:1" pos:end="146:3">Tab</name><index pos:start="146:4" pos:end="146:17">[<expr pos:start="146:5" pos:end="146:16"><name pos:start="146:5" pos:end="146:10">Index2</name><operator pos:start="146:11" pos:end="146:11">+</operator><name pos:start="146:12" pos:end="146:16">Index</name></expr>]</index></name> <operator pos:start="146:19" pos:end="146:19">=</operator> <literal type="number" pos:start="146:21" pos:end="146:22">20</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif" pos:start="148:1" pos:end="151:1">else if <condition pos:start="148:9" pos:end="148:32">(<expr pos:start="148:10" pos:end="148:31"><operator pos:start="148:10" pos:end="148:10">(</operator><name pos:start="148:11" pos:end="148:16">Index2</name> <operator pos:start="148:18" pos:end="148:18">+</operator> <name pos:start="148:20" pos:end="148:24">Index</name><operator pos:start="148:25" pos:end="148:25">)</operator> <operator pos:start="148:27" pos:end="148:27">&gt;</operator> <literal type="number" pos:start="148:29" pos:end="148:31">100</literal></expr>)</condition>
<block pos:start="149:1" pos:end="151:1">{<block_content>
	<comment type="line" pos:start="150:9" pos:end="150:22">//do something</comment>
</block_content>}</block></if></if_stmt>


<return pos:start="154:1" pos:end="154:16">return <expr pos:start="154:8" pos:end="154:15"><name pos:start="154:8" pos:end="154:15">resultat</name></expr>;</return>
</block_content>}</block></function>
</unit>

</unit>
